#
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# "The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations under
# the License.
#
# The Original Code is ICEfaces 1.5 open source software code, released
# November 5, 2006. The Initial Developer of the Original Code is ICEsoft
# Technologies Canada, Corp. Portions created by ICEsoft are Copyright (C)
# 2004-2006 ICEsoft Technologies Canada, Corp. All Rights Reserved.
#
# Contributor(s): _____________________.
#
# Alternatively, the contents of this file may be used under the terms of
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"
# License), in which case the provisions of the LGPL License are
# applicable instead of those above. If you wish to allow use of your
# version of this file only under the terms of the LGPL License and not to
# allow others to use your version of this file under the MPL, indicate
# your decision by deleting the provisions above and replace them with
# the notice and other provisions required by the LGPL License. If you do
# not delete the provisions above, a recipient may use your version of
# this file under either the MPL or the LGPL License."
#
#

#
showCasetitle = ICEfaces Component Showcase

# themes
theme.title =Theme:
theme.xp =XP
theme.royale =Royale

# Root node menu
menuDisplayText.componentSuiteMenuGroup = ICEfaces Component Suite
submenuContentTitle.componentSuiteMenuGroup = ICEfaces Component Suite

# Custom Components menu
menuDisplayText.componentsMenuGroup = Components
submenuContentTitle.componentsMenuGroup = Components

# Layout Panels menu item
submenuDisplayText.layoutPanelMenuGroup = Layout Panels
submenuContentTitle.layoutPanelMenuGroup = Layout Panel Components

# Style menue
submenuDisplayText.themesSubmenuItem = Component Styling
submenuContentTitle.themesSubmenuItem = Component Styling

# Survey
startpage.survey.linkText = Send your feedback by filling this survey

## Component Submenu items
submenuDisplayText.selectInputDateComponentSubmenuItem = Calendar
submenuContentTitle.selectInputDateComponentSubmenuItem = Calendar Component
submenuDisplayText.treeComponentSubmenuItem = Tree
submenuContentTitle.treeComponentSubmenuItem = Tree Component
submenuDisplayText.autoCompleteSubmenuItem = Autocomplete
submenuContentTitle.autoCompleteSubmenuItem = Autocomplete Component
submenuDisplayText.dragDropSubmenuItem = Drag & Drop
submenuContentTitle.dragDropSubmenuItem = Drag & Drop Component
submenuDisplayText.listSubmenuItem = Series Panel
submenuContentTitle.listSubmenuItem = Series Panel Component
submenuDisplayText.outputProgressComponentSubmenuItem = Progress Bar
submenuContentTitle.outputProgressComponentSubmenuItem = Progress Bar Component
submenuDisplayText.inputFileComponentSubmenuItem = File Upload
submenuContentTitle.inputFileComponentSubmenuItem = File Upload Component
submenuDisplayText.connectionStatusSubmenuItem = Connection Status
submenuContentTitle.connectionStatusSubmenuItem = Connection Status Component
submenuDisplayText.effectsSubmenuItem = Effects
submenuContentTitle.effectsSubmenuItem = Effects Demo
submenuDisplayText.panelPopupSubmenuItem = Popup Panel
submenuContentTitle.panelPopupSubmenuItem = Popup Panel Component
submenuDisplayText.menuBarSubmenuItem = Menu Bar / Menu Popup
submenuContentTitle.menuBarSubmenuItem = Menu Bar / Menu Popup Components
submenuDisplayText.positionedPanelItem =  Positioned Panel
submenuContentTitle.positionedPanelItem = Positioned Panel Component

submenuDisplayText.collapsiblePanelItem =  Collapsible Panel
submenuContentTitle.collapsiblePanelItem = Collapsible Panel Component

submenuDisplayText.inputRichText =  Input Rich Text
submenuContentTitle.inputRichText = Input Rich Text Component

submenuDisplayText.chartComponentSubmenuItem = Charts
submenuContentTitle.chartComponentSubmenuItem = Chart Component
submenuDisplayText.combinedChartComponentSubmenuItem = Combining Charts
submenuContentTitle.combinedChartComponentSubmenuItem = Combining Charts
submenuDisplayText.dynamicChartComponentSubmenuItem = Dynamic Chart
submenuContentTitle.dynamicChartComponentSubmenuItem = Dynamic Chart

# Table Components Submenu items
submenuDisplayText.textFieldsSubmenuItem = Text Entry
submenuContentTitle.textFieldsSubmenuItem = Text Entry Components
submenuDisplayText.selectionTagsSubmenuItem = Selection
submenuContentTitle.selectionTagsSubmenuItem = Selection Components
submenuDisplayText.buttonsAndLinksSubmenuItem = Buttons & Links
submenuContentTitle.buttonsAndLinksSubmenuItem = Button & Link Components
submenuDisplayText.tableComponentSubmenuItem = Table
submenuContentTitle.tableComponentSubmenuItem = Table Component
submenuDisplayText.columnsComponentSubmenuItem = Columns
submenuContentTitle.columnsComponentSubmenuItem = Columns Component
submenuDisplayText.tableExpandableComponentSubmenuItem = Expandable Table
submenuContentTitle.tableExpandableComponentSubmenuItem = Expandable Table Example
submenuDisplayText.dataSortHeaderComponentSubmenuItem = Sortable Header
submenuContentTitle.dataSortHeaderComponentSubmenuItem = Sortable Header Component
submenuDisplayText.dataScrollerComponentSubmenuItem = Data Paging
submenuContentTitle.dataScrollerComponentSubmenuItem = Data Paging Component
submenuDisplayText.tableRowSelectionComponentSubmenuItem = Table Row Selection
submenuContentTitle.tableRowSelectionComponentSubmenuItem = Table Row Selection Component


# Layout Component Submenu items
submenuDisplayText.groupPanelComponentSubmenuItem = Grouping Panel
submenuContentTitle.groupPanelComponentSubmenuItem = Grouping Component
submenuDisplayText.gridPanelComponentSubmenuItem = Grid Panel
submenuContentTitle.gridPanelComponentSubmenuItem = Grid Component
submenuDisplayText.panelStackComponentSubmenuItem = Stacking Panel
submenuContentTitle.panelStackComponentSubmenuItem = Stacking Panel Component
submenuDisplayText.borderLayoutComponentSubmenuItem = Border Panel
submenuContentTitle.borderLayoutComponentSubmenuItem = Border Panel Component
submenuDisplayText.tabbedComponentSubmenuItem = Tab Set Panel
submenuContentTitle.tabbedComponentSubmenuItem = Tab Set Panel Component

# google Maps
submenuDisplayText.googlemaps = Google Maps
submenuContentTitle.googlemaps = Google Maps
submenuDisplayText.demo1 = GMap Address Attribute
submenuContentTitle.demo1 = GMap Address Attribute
submenuDisplayText.demo2 = GClientGeocoder API
submenuContentTitle.demo2 = GClientGeocoder API
submenuDisplayText.demo3 = Gmap LocateAddress Attribute
submenuContentTitle.demo3 = Gmap LocateAddress Attribute
submenuDisplayText.demo4 = GMapControl Tags 
submenuContentTitle.demo4 = GMapControl Tags
submenuDisplayText.demo5 = GMapMarker Tags
submenuContentTitle.demo5 = GMapMarker Tags
submenuDisplayText.demo6 = Demo6
submenuContentTitle.demo6 = Demo6
submenuDisplayText.demo7 = Demo7
submenuContentTitle.demo7 = Demo7
submenuDisplayText.demo8 = Demo8
submenuContentTitle.demo8 = Demo8

# Default tab titles - for each component
tabbedHeadings.description = Description
tabbedHeadings.demo = Demonstration
tabbedHeadings.source = Source
tabbedHeadings.source.iframeMessage = Iframe not support use this link to view source.
tabbedHeadings.docs = Documentation

# Shared between all demos
component.global.serverFeedback = Server-side Backing Bean Values:

# Tree component example
components.tree.selected = Selected Node:
components.tree.basicTree = Default Tree Component
components.tree.node.title = Node
components.tree.node.tooltip = Node Tool Tip
components.tree.node.outputText.label = OutputText
components.tree.node.commandButton.label = Button
components.tree.delete = Delete
components.tree.copy = Copy
components.tree.explanation = This Tree demonstration shows:
components.tree.explanation.point1 = Dynamic update of tree without full-page refresh
components.tree.explanation.point2 = Node-aware actionListener that counts user clicks
components.tree.explanation.point3 = Add/remove tree nodes dynamically via data bean

# Tabbed Component Example
component.tabSet.persistantText = Text can be set to show on every tab
component.tabSet.tabVisibility = Tab Visibility:
component.tabSet.tabFocus = Selected Tab:
component.tabSet.tabPlacement = Tab Placement:
component.tabSet.top = top
component.tabSet.bottom = bottom
component.tabSet.tab1 = Tab 1
component.tabSet.tab1.content = Tab 1 content.
component.tabSet.tab2 = Tab 2
component.tabSet.tab2.content = Tab 2 content.
component.tabSet.tab3 = Tab 3
component.tabSet.tab3.content = Tab 3 content.
components.tabSet.example.iceFaces.title = ICEfaces
components.tabSet.example.iceFaces.description = The industry's first standards-compliant AJAX based solution for rapidly creating all Java rich web applications that are easily maintained, extended, and scaled, at very low cost.
components.tabSet.example.iceBrowser.title = ICEbrowser
components.tabSet.example.iceBrowser.description = The most widely distributed Java browser in the world for rendering web content into Java enterprise applications.
components.tabSet.example.icePdf.title = ICEpdf
components.tabSet.example.icePdf.description =  The leading Java PDF document rendering and viewing solution designed to be easily integrated into Java enterprise applications.
component.tabSet.addTab.title = Add a tab:
component.tabSet.addTab.tabLabel = Tab Label:
component.tabSet.addTab.tabContent = Tab Content:
component.tabSet.removeTab.title = Remove a tab:
component.tabSet.static.title = Static Tab Set Panel
component.tabSet.dynamic.title = Dynamic Tab Set Panel

# Progress Bar Example
component.progressBar.startButton = Start
component.progressBar.demo.selectMode = Select Output Mode:
component.progressBar.demo.mode.standard = Standard
component.progressBar.demo.mode.indeterminate = Indeterminate
component.progressBar.demo.content = Press the "Start" button to simulate a long-running process:
component.progressBar.demo.content2 = Press the "Start" button to simulate a process in indeterminate mode:
component.progressBar.label = Custom "In Progress" label:
component.progressBar.labelComplete = Custom "Completed" label:
component.progressBar.labelPosition = Select Label position:
component.progressBar.default = Default
component.progressBar.labelAlign = Label alignment:
component.progressBar.bottom = bottom left
component.progressBar.bottomCenter = bottom center
component.progressBar.bottomRight = bottom right
component.progressBar.top = top left
component.progressBar.topCenter  = top center
component.progressBar.topRight  = top right
component.progressBar.other = Custom
component.progressBar.left = left
component.progressBar.right = right
component.progressBar.embed = embedded

# Calendar Example
components.dateSelect.nonPopup = Default Calendar:
components.dateSelect.popup = Popup Calendar:
components.dateSelect.selectedDate = Selected Date:
components.dateSelect.title = Enter date as: mm/dd/yyyy

# Panel Stack Example
components.panelStack.example.summary = Select a panel group to display:
components.panelStack.example.fruit.title = Fruit
components.panelStack.example.colour.title = Colour
components.panelStack.example.mineral.title = Mineral

# Data Scroller Example
component.progressBar.dataScroller = Data test

# Panel Navigation Example
component.panelNavigation.mainlink1 = Navigation Link 1
component.panelNavigation.mainlink2 = Navigation Link 2
component.panelNavigation.subLink1-1 = Sub Link 1-1
component.panelNavigation.subLink1-2 = Sub Link 1-2
component.panelNavigation.subLink2-1 = Sub Link 2-1
component.panelNavigation.subLink2-2 = Sub Link 2-2
component.panelNavigation.selectedPanel = You selected
component.panelNavigation.directions = Click on the navigation menu to select a different panel

# Border layout
component.panelLayout.placement = Panel Visibility:

# File Upload Example
component.fileUpload.title = File Upload
component.fileUpload.fileSize = File Size:
component.fileUpload.fileName =  File Name:
component.fileUpload.mimeType = Mime Type:
component.fileUpload.upload = Return to component showcase
component.fileUpload.direction1 = Select a file to upload using the 'Browse...' button, then upload the file by pressing the 'Upload' button.
component.fileUpload.note = Note:
component.fileUpload.direction2 = Do not press your web browser's 'back' button. To return to the component showcase, click this button:


# Selection Tags Example
component.selectionTags.instructions = Make selections using the mouse or keyboard.
component.selectionTags.subInstructions = Changing selection state triggers a partial submit.
component.selectionTags.newUser = New user:
component.selectionTags.popButtonLabel = Select drink:
component.selectionTags.languageButtonLabel = Select languages:
component.selectionTags.countryAndCitiesLabel = Select country & cities:
component.selectionTags.componentTypeLabel = Select component type:
component.selectionTags.serverFeedback = Server-side Backing Bean Values:
component.selectionTags.resultNewUserLabel = New user:
component.selectionTags.resultDrinkLabel = Drink:
component.selectionTags.resultLanguageLabel = Language:
component.selectionTags.resultCountryLabel = Country:
component.selectionTags.resultCitiesLabel = Cities:
component.selectionTags.carsLabel = Select Cars:

# Text Fields Example
component.textFields.directions = Pressing Enter or tabbing out of an input field triggers a partial submit:
component.textFields.name = Name:
component.textFields.password = Password:
component.textFields.comments = Comments:
component.textFields.serverFeedback = Server-side Backing Bean Values:
component.inputRichTextFields.serverFeedback = Server-side Backing Bean Value:
component.inputRichTextFields.instructions = Click the save button to submit data to the server and display it below.

# Buttons and Links Example
component.buttonsAndLinks.inputTextLabel = Input Text:
component.buttonsAndLinks.inputTextNote =  (Partial submit disabled.)
component.buttonsAndLinks.submitButtonLabel = Command Button:
component.buttonsAndLinks.resetButtonLabel = Reset Button:
component.buttonsAndLinks.resetButtonNote =   (Resets form. No submit.)
component.buttonsAndLinks.pushButtonLabel = Push Button:
component.buttonsAndLinks.pushButtonNote =  (Fires onclick event, doesn't submit.)
component.buttonsAndLinks.imageButtonLabel = Image Button:
component.buttonsAndLinks.commandLinkLabel = Command Link:
component.buttonsAndLinks.outputLinkLabel = Output Link:
component.buttonsAndLinks.serverFeedback = Server-side Backing Bean Values:
component.buttonsAndLinks.clickedLabel = Clicked:
component.buttonsAndLinks.firedLabel = Action Event:

# Autocomplete Example
component.autoComplete.instructions = Select a value using the enter key or the mouse; tabbing out will select the first value.
component.autoComplete.subInstructions = Both selectInputText element instances are using the same backing bean--only the JSF source is different.
component.autoComplete.plainTitle = selectInputText:
component.autoComplete.plainDirections = using selectItem as child for plain text
component.autoComplete.htmlTitle = selectInputText:
component.autoComplete.htmlDirections = using facet as child to generate generic html
component.autoComplete.serverFeedback = Server-side Backing Bean Values
component.autoComplete.subServerFeedback = Populated by valueChangeListener
component.autoComplete.resultCityLabel = City:
component.autoComplete.resultStateLabel = State:
component.autoComplete.resultCountyLabel = County:
component.autoComplete.resultZipLabel = Zip:
component.autoComplete.resultAreaCodeLabel = Area Code:

# Drag and Drop Example
component.dragDrop.instructions = Drag and Drop each item's respective icon to the cart icon to add it to the shopping cart.
component.dragDrop.subInstructions = Press the "Return" button on each item to remove it from the cart.
component.dragDrop.store = Store
component.dragDrop.store.name = Name:\ 
component.dragDrop.store.price = Price:\ 
component.dragDrop.store.quantity = Quantity:\ 
component.dragDrop.cart = Cart
component.dragDrop.cart.image = Image
component.dragDrop.cart.name = Name
component.dragDrop.cart.price = Price
component.dragDrop.cart.quantity = Quantity
component.dragDrop.cart.cost = Cost
component.dragDrop.cart.returnOne = Return Item
component.dragDrop.cart.return = Return
component.dragDrop.cart.total = Total:
component.dragDrop.cartZoneLabel1 = Add to Cart
component.dragDrop.cartZoneLabel2 = Drag store items to cart

# Panel Series Example
component.panelSeries.instructions = Series Panel component:
component.panelSeries.subInstructions = The product list and shopping list each define one element and iterate over a variable using the panelSeries component.
component.panelSeries.itemList = Item List
component.panelSeries.shoppingListTitle = Shopping List:
component.panelSeries.subtotalLabel = Subtotal:
component.panelSeries.totalLabel = Total:
component.panelSeries.productLabel.name = Name:
component.panelSeries.productLabel.serialNo = Serial #:
component.panelSeries.productLabel.category = Category:
component.panelSeries.productLabel.unitPrice = Price:
component.panelSeries.productSelection.discountLabel = Discount (%):
component.panelSeries.productSelection.quantityLabel = Quantity:
component.panelSeries.productSelection.buy = "Buy\ 
component.panelSeries.productSelection.return = "Return\ 

# Effects Example
effects.instructions = Effect:
effects.results = Results:
effects.attributes = Attributes:
effects.labels.duration = Duration (seconds):
effects.move.title = Move
effects.move.labels.mode = Mode:
effects.move.labels.rel = Relative
effects.move.labels.abs = Absolute
effects.move.labels.x = X:
effects.move.labels.y = Y:
effects.move.labels.invoke = Invoke
effects.move.labels.reset = Reset
effects.appearFade.title = Appear & Fade
effects.appearFade.labels.from = Appear opacity:
effects.appearFade.labels.to = Fade opacity:
effects.appearFade.appear = Appear
effects.appearFade.fade = Fade
effects.highlight.title = Highlight
effects.highlight.labels.colour = Highlight Colour:
effects.highlight.labels.red = Red
effects.highlight.labels.orange = Orange
effects.highlight.labels.yellow = Yellow
effects.highlight.labels.green = Green
effects.highlight.labels.blue = Blue
effects.highlight.labels.indigo = Indigo
effects.highlight.labels.violet = Violet
effects.highlight.labels.black = Black
effects.highlight.labels.invoke = Invoke
effects.scale.labels.invoke = Shrink
effects.scale.labels.reset = Enlarge
effects.puff.labels.invoke = Invoke
effects.puff.labels.reset = Reset
effects.blindup.labels.invoke = Invoke
effects.blindup.labels.reset = Reset
effects.blinddown.labels.invoke = Invoke
effects.switchoff.labels.invoke = Invoke
effects.dropout.labels.invoke = Invoke
effects.dropout.labels.reset = Reset
effects.shake.labels.invoke = Invoke
effects.slidedown.labels.invoke = Invoke
effects.slideup.labels.invoke = Invoke
effects.slideup.labels.reset = Reset
effects.squish.labels.invoke = Invoke
effects.squish.labels.reset = Reset
effects.grow.labels.invoke = Invoke
effects.shrink.labels.invoke = Invoke
effects.shrink.labels.reset = Reset
effects.fold.labels.invoke = Invoke
effects.fold.labels.reset = Reset
effects.pulsate.title = Pulsate
effects.pulsate.labels.duration = Duration (seconds):
effects.scale.title=Scale
effects.scale.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.
effects.puff.title=Puff
effects.puff.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.
effects.blindup.title=Blind Up
effects.blindup.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.
effects.blinddown.title=Blind Down
effects.blinddown.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.
effects.switchoff.title=Switch Off
effects.switchoff.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.
effects.dropout.title=Drop Out
effects.dropout.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.
effects.shake.title=Shake
effects.shake.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.
effects.slidedown.title=Slide Down
effects.slidedown.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.
effects.slideup.title=Slide Up
effects.slideup.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.
effects.squish.title=Squish
effects.squish.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.
effects.grow.title=Grow
effects.grow.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.
effects.shrink.title=Shrink
effects.shrink.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.
effects.fold.title=Fold
effects.fold.desc=ICEfaces effects provide all sorts of ways to manipulate the user interface.


# Connection Status Example
component.connectionStatus.title = Connection Status
component.connectionStatus.explanation = The connection status component displays information \
  about the status of the network connection between the client browser and the server. Look to the top right of this \
  tabbed pane to see the connection status in action. The component \
  displays one of four possible states, which are as follows:
component.connectionStatus.labels.connectIdle = Idle
component.connectionStatus.labels.connectActive = Active
component.connectionStatus.labels.connectCaution = Caution
component.connectionStatus.labels.connectDisconnected = Disconnected

# Menu Bar Example
component.menuBar.instructions = Menu Bar
component.menuPopup.instructions = Menu Popup
component.menuBar.orientation.label = Orientation:
component.menuBar.orientation.horiz = Horizontal
component.menuBar.orientation.vert = Vertical
component.menuBar.subInstructions = In the first box below, choose the orientation of the Menu Bar and then select a menu item.  The backing been value of the selected item will be reflected at the bottom of the page.
component.menuPopup.subInstructions = Two Menu Popup components are bound to two Panel Group components.  Right click on this text and you will see a selection of Menu Items bound to the first Panel Group.  Right click below and you will see a selection of Menu Items bound to the second Panel Group.  In both cases, the backing been value of the selected item will be reflected at the bottom of the page.
component.menuBar.selection = Menu Selection:
component.menuBar.param = Param value:

# Popup Panel Example
component.popupPanel.title = Popup Panel:
component.popupPanel.instructions =Use the controls below to toggle the Draggable and Modal Popup components.
component.popupPanel.draggable.title = Draggable Popup Panel
component.popupPanel.draggable.content = This Popup is draggable. It has a header facet with an Icon, a Title and a Close button. This popup can be toggled on and off.
component.popupPanel.draggable.controlLabel = Display Draggable Popup:
component.popupPanel.modal.title = Modal Popup Panel
component.popupPanel.modal.content = This Modal Popup is not draggable. It can only be closed using its Close button.
component.popupPanel.modal.controlLabel = Display Modal Popup:

# Examples used to fill tabs and panel example
contentDemo.fruit.title = Favourite Fruit
contentDemo.fruit.type1 = Pomegranate
contentDemo.fruit.type2 = Avocado
contentDemo.fruit.type3 = Banana
contentDemo.fruit.type4 = Mango
contentDemo.fruit.type5 = Carambola

contentDemo.colour.title = Favourite Colour
contentDemo.colour.type1 = Yellow
contentDemo.colour.type2 = Plum
contentDemo.colour.type3 = Violet
contentDemo.colour.type4 = Magenta
contentDemo.colour.type5 = Bisque

contentDemo.mineral.title = Favourite Mineral
contentDemo.mineral.type1 = Sodalite
contentDemo.mineral.type2 = Serpentine
contentDemo.mineral.type3 = Galena
contentDemo.mineral.type4 = Dolomite
contentDemo.mineral.type5 = Kyanite

# Table example
component.table.title = Show Table Columns:
component.table.scrollable.title = Scrollable Settings:
component.table.scrollable.height = Scroll Height
component.table.column1 = First Name
component.table.column2 = Last Name
component.table.column3 = Phone
component.table.column4 = Email
component.table.scrollable = Enable Scrolling

# Columns example
component.columns.title = Manipulating the second dimension of a DataTable:

# Chart example
component.chart.type.title = Chart Type:
component.chart.orientation.title = Chart Orientation:
component.chart.orientation.horiz = Horizontal
component.chart.orientation.vert = Vertical
component.chart.addChart.label = Add Chart Item
component.chart.addChartCommand.label = Add
component.chart.removeChartCommand.label = Remove
component.chart.removeChartCommand.explanation = Minimum 2 pieces of data
component.chart.removeChart.label = Remove Chart Item
component.combinedChart.title = Combine different chart types:
component.combinedChart.desc1 = This demonstration combines a bar chart with a line chart.
component.combinedChart.desc2 = Click image map for chart value:\ 
component.dynamicChart.title = Manipulate the underlying chart data:
component.pie3dChart.title = Pie3D Chart
component.chart.sales.title = Year Specific Data:
component.chart.sales.product = Product Name
component.chart.sales.price = Price
component.chart.sales.year = Year

# table paginator
component.dataPaginator.description = Use the controls below to browse the information:
component.dataPaginator.layout.description = Change the layout of the paginator:
component.dataPaginator.layout.horiz = Horizontal
component.dataPaginator.layout.vert = Vertical
component.dataPaginator.data.description = Add or remove entries from the list:
component.dataPaginator.firstpage = first page
component.dataPaginator.lastpage = last page
component.dataPaginator.previouspage = previous page
component.dataPaginator.nextpage = next page
component.dataPaginator.fastforward =  fast forward
component.dataPaginator.fastbackward = fast backward
component.dataPaginator.addcontent = Add Data
component.dataPaginator.remcontent = Remove Data
component.dataPaginator.format = {0} persons found, displaying {1} persons, from {2} to {3}. Page {4} / {5}.

# row selection example
component.table.row.selection.instructions = Table rows can be selected and unselected with a mouse click.
component.table.row.selection.results= Selected Rows
component.table.row.selection.clicktoselect= Click to Select
component.table.row.selection.multiple = Enable multiple row selection
component.table.row.selection.clear = Clear Selection

# Positioned Panel Component
component.table.row.panelPositioned.instruction = Using the mouse move people in the Edit Rank column to change the rank.
component.table.row.panelPositioned.positionable.column.label = Edit Rank
component.table.row.panelPositioned.fixed.column.label = Current Rank
component.table.row.panelPositioned.changed.column.label = Rank Changed.

# Collapsible Panel Example
component.collapsiblePanel.title = Collapsible Panel:
component.collapsiblePanel.instructions = Click on the headers to expand/contract the accordion panel.
component.collapsiblePanel.links.header = Links
component.collapsiblePanel.form.header = Form
component.collapsiblePanel.form.firstName = First Name:
component.collapsiblePanel.form.lastName = Last Name:
component.collapsiblePanel.form.phone = Phone:
component.collapsiblePanel.form.email = Email:
component.collapsiblePanel.text.header = Text
component.collapsiblePanel.text.description = The industry's first standards-compliant AJAX based solution for rapidly creating \
  all Java rich web applications that are easily maintained, extended, and scaled, at very low cost.
component.collapsiblePanel.image.header = Image

# Gmap
component.gmap.demo1.desc = The ice:gMap component with a default location set in the address attribute.
component.gmap.demo1.address = New York City
component.gmap.demo2.desc1 = Geocoding is the process of converting addresses (1600 Amphitheatre Parkway, Mountain View, CA) into geographic coordinates (latitude 37.423021 and longitude -122.083739), which you can use to place markers or position the map.
component.gmap.demo2.desc2 = The ice:gMap component uses google maps' GClientGeocoder API implicitly to locate an address.                            
component.gmap.demo2.find = Find address :\ 
component.gmap.demo3.desc = The ice:gMap component's locateAddress attribute \
  is a boolean that will render a new location when set to true.  Selecting \
  an address from the following list will change the address bound to the \
  component, set the locateAddress attribute to true and render the new address.
component.gmap.demo3.select = --Select--
component.gmap.demo3.city1 = Tokyo
component.gmap.demo3.city2 = Mexico City
component.gmap.demo3.city3 = New York
component.gmap.demo3.city4 = Sao Paulo
component.gmap.demo3.city5 = Mumbai
component.gmap.demo4.desc = You can nest the desired ice:gMapControl tags inside an ice:gMap tag.  If you leave this demo and return, you will find these controls maintain their state.
component.gmap.demo5.desc = You can nest an ice:gMapMarker tag to display single or multiple locations on a map.
component.gmap.demo6.desc = View KML examples (geoxml-kml.html).

component.commandsortheader.desc = Click a column heading to sort the table:
component.commandsortheader.firstName = First Name
component.commandsortheader.lastName = Last Name
component.commandsortheader.phoneNo = Phone No
component.commandsortheader.email = E-mail

