<project name="sparkle-comps" default="dist" basedir=".">
    <description>
        Component build file
    </description>
  <property file="build.properties"/>    
  <property name="src" location="src"/>
  <property name="resources" location="resources"/>  
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>
  <property name="conf"  location="conf"/>
  <property name="bin"  location="bin/"/>
  <property name="exploded"  location="${build}/exploded"/>
  <property name="doc" location="${build}/doc"/>
  <property name="tld.doc" location="${doc}/tld"/>
  <property name="tld.file"   location="${build}/exploded/META-INF/components.tld"/>
  <property name="tld.jar"  location="../../icefaces2/icefaces/lib/"/>
  <property name="smartsprites.basedir" location="../tools/smartsprites" />
  
  <path id="compile.run.classpath">
  	    <fileset dir="${icefaces.lib.dir}" includes="*.jar"/>
        <pathelement path="../component/src"/>
        <pathelement path="../generator/build"/>
        <pathelement path="../component/build/meta"/>

  </path>
  
	<!-- include source images and css for sprite generation -->
	<macrodef name="includeresources">
		<attribute name="dir"/>
		<attribute name="name"/>
		<attribute name="skin"/>
		<sequential>
			<mkdir dir="${root.dir.path}/@{skin}" />
			<mkdir dir="${root.dir.path}/@{skin}/@{name}" />
			<copy todir="${root.dir.path}/@{skin}/@{name}">
				<fileset dir="@{dir}/@{skin}" includes="**" />
			</copy>
		</sequential>
	</macrodef>
	
	<!-- check for any file modifications and call smartsprites -->
	<macrodef name="generatesprites">
		<attribute name="skin"/>
		<sequential>
			<mkdir dir="${root.dir.path}/@{skin}/base" />
			<copy todir="${root.dir.path}/@{skin}/base" file="${smartsprites.basedir}/base.css" />
			<fileset id="@{skin}.files" dir="${root.dir.path}/@{skin}">
				<modified/>
			</fileset>
			<pathconvert property="@{skin}.modified" refid="@{skin}.files" setonempty="false" />
			<antcall target="smartsprites">
				<param name="skin" value="@{skin}"/>
			</antcall>
		</sequential>
	</macrodef>
	
	<!-- run cssurlmapper tool on CSS files not using sprites -->
	<macrodef name="mapnosprites">
		<attribute name="library" />
		<attribute name="dir" />
		<attribute name="skin" />
		<sequential>
			<cssurlmapper libraryname="@{library}" inputdir="@{dir}/@{skin}" outputdir="${resources}/@{library}/@{skin}" referencedir="@{dir}" />
			<copy todir="${resources}/@{library}/@{skin}">
				<fileset dir="@{dir}/@{skin}">
					<exclude name="**/*.css"/>
				</fileset>
			</copy>
		</sequential>
	</macrodef>
	
	<!-- run cssurlmapper tool on CSS files generated by SmartSprites -->
	<macrodef name="mapsprites">
		<attribute name="library" />
		<attribute name="name" />
		<attribute name="skin" />
		<sequential>
			<mkdir dir="${temp.dir.path}/@{name}/@{skin}/css" />
			<copy todir="${temp.dir.path}/@{name}/@{skin}/css">
				<fileset dir="${output.dir.path}/@{skin}/@{name}" />
			</copy>
			<cssurlmapper libraryname="${sprites.lib}" inputdir="${temp.dir.path}/@{name}/@{skin}/css" outputdir="${resources}/@{library}/@{skin}" referencedir="${temp.dir.path}/@{name}" />
		</sequential>
	</macrodef>
	
	<!-- delete all generated files related to a skin in resource libraries-->
	<macrodef name="deleteskin">
		<attribute name="name" />
		<sequential>
			<delete includeemptydirs="true">
				<fileset dir="${resources}">
					<include name="**/@{name}/**" />
					<exclude name="yui/**" />
				</fileset>
			</delete>
		</sequential>
	</macrodef>
	
	<macrodef name="concatskin">
		<attribute name="name"/>
		<sequential>
			<concat destfile="${resources}/${skins.lib}/@{name}.css" append="true">
				<fileset dir="${resources}">
					<include name="**/@{name}/*.css" />
					<exclude name="yui/**" />
				</fileset>
			</concat>
		</sequential>
	</macrodef>

  <target name="compile" depends="prepare, generator-dist, compile-meta, generate" 
        description="compile the source " >
    
    <javac srcdir="${build}/generated/base" destdir="${exploded}" debug="true">
        <classpath refid="compile.run.classpath"/>
    </javac>
      
    <javac srcdir="${src}" destdir="${build}/exploded" debug="true" excludes="**/*Meta.java">
    	<classpath refid="compile.run.classpath"/>
    </javac>  

    <javac srcdir="${build}/generated/support" destdir="${exploded}" debug="true">
        <classpath refid="compile.run.classpath"/>
    </javac> 
    
    <copy todir="${exploded}/META-INF/resources">
	    <fileset dir="${resources}"/>
    </copy>    
  </target>
    
  <target name="prepare">
    <mkdir dir="${build}/meta"/>
    <mkdir dir="${exploded}"/>
    <mkdir dir="${build}/generated"/>
    <mkdir dir="${build}/generated/base"/>
    <mkdir dir="${build}/generated/support"/>
  </target>

  <target name="generator-dist">
    <ant inheritAll="false" antfile="../generator/build.xml" target="dist"/>
  </target>
    
  <target  name="compile-meta">
    <javac srcdir="${src}" destdir="${build}/meta" debug="true" includes="**/*Meta.java">
        <classpath refid="compile.run.classpath"/>
    </javac>   
  </target>
    
  <target name="generate" >
    <ant inheritAll="false" antfile="../generator/build.xml" target="generate"/>
  </target>

  <target name="dist" depends="resources,compile" 
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>

    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/${ant.project.name}.jar" basedir="${exploded}"/>
  </target>

  <target name="clean"
        description="clean up" >

  	<!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
	
	<antcall target="clean-resources" />

	<subant buildpath="${cssurlmapper.rootdir}" target="clean" />
  </target>
  
	<target name="resources" description="Prepare CSS and image resources." depends="cssurlmapper">
	
		<taskdef name="cssurlmapper" classname="${cssurlmapper.class}" 
			classpath="${cssurlmapper.rootdir}/dist/cssurlmapper.jar;${cssurlmapper.rootdir}/lib/commons-cli-1.2.jar"/>
		
		<!-- only one of the following will be executed, depending on use.sprites property -->
		<antcall target="nosprites" />
		<antcall target="sprites" />
		
		<concatskin name="rime" />
		<concatskin name="sam" />
		
		<!-- add files from the YUI library to the concatenated sam skin -->
		<antcall target="concatyuisam" />
		
	</target>
	
	<target name="cssurlmapper" description="Build the CSS URL mapping tool.">
		<subant buildpath="${cssurlmapper.rootdir}" target="compile" />
	</target>
	
	<target name="clean-resources" description="Clean all generated resources.">
	
		<!-- Delete sprite-related files -->
		<delete dir="${root.dir.path}" />
		<delete dir="${output.dir.path}" />
		<delete dir="${temp.dir.path}" />
		<delete includeemptydirs="true">
			<fileset dir="${resources}/${sprites.lib}" includes="**" />
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="${resources}/${skins.lib}" includes="**" />
		</delete>
		<delete file="cache.properties" />
		
		<!-- Delete generated skin files from resource libraries -->
		<deleteskin name="sam" />
		<deleteskin name="rime" />
		
	</target>
  
	<target name="nosprites" description="Copy resources from source folders, transforming URLs in CSS files" unless="use.sprites">
		
		<!--
			Map the URLs in the original CSS files and place them in the approrpiate library.
			'library' is the name of the resource library where the resources will be reachable.
			'dir' is the root directory that contains the source files of the different skins of a component.
			'skin' is the name of the directory inside 'dir' to look for the files for a specific skin.			
		-->
		
		<mapnosprites library="org.icefaces.component.menubutton" dir="src\org\icefaces\component\menubutton\skins" skin="sam" />
		<mapnosprites library="org.icefaces.component.pushbutton" dir="src\org\icefaces\component\pushbutton\skins" skin="sam" />
		<mapnosprites library="org.icefaces.component.checkbox" dir="src\org\icefaces\component\checkbox\skins" skin="sam" />
		<mapnosprites library="org.icefaces.component.radiobutton" dir="src\org\icefaces\component\radiobutton\skins" skin="sam" />
		<mapnosprites library="org.icefaces.component.commandlink" dir="src\org\icefaces\component\commandlink\skins" skin="sam" />
		<mapnosprites library="org.icefaces.component.datetimeselector" dir="src\org\icefaces\component\datetimeselector\skins" skin="sam" />
		<mapnosprites library="org.icefaces.component.slider" dir="src\org\icefaces\component\slider\skins" skin="sam" />
		<mapnosprites library="org.icefaces.component.tab" dir="src\org\icefaces\component\tab\skins" skin="sam" />
		<mapnosprites library="org.icefaces.component.inputFiles" name="src\org\icefaces\component\inputFiles\skins" skin="sam" />
		
		<mapnosprites library="org.icefaces.component.datetimeselector" dir="src\org\icefaces\component\datetimeselector\skins" skin="rime" />
		<mapnosprites library="org.icefaces.component.checkbox" dir="src\org\icefaces\component\checkbox\skins" skin="rime" />
		<mapnosprites library="org.icefaces.component.radiobutton" dir="src\org\icefaces\component\radiobutton\skins" skin="rime" />
		<mapnosprites library="org.icefaces.component.commandlink" dir="src\org\icefaces\component\commandlink\skins" skin="rime" />
		<mapnosprites library="org.icefaces.component.tab" dir="src\org\icefaces\component\tab\skins" skin="rime" />
		<mapnosprites library="org.icefaces.component.inputFiles" name="src\org\icefaces\component\inputFiles\skins" skin="rime" />
		<mapnosprites library="org.icefaces.component.slider" dir="src\org\icefaces\component\slider\skins" skin="rime" />

	</target>
	
	<target name="sprites" description="Prepare files to generate sprites." if="use.sprites">

		<available file="build.properties" property="smartsprites.properties.available" />
		<fail unless="smartsprites.properties.available">

	Please provide SmartSprite parameters in a 'build.properties' file.

		</fail>
		
		<property file="build.properties" />
		
		<taskdef resource="smartsprites.xml">
		  <classpath>
			<fileset dir="${smartsprites.basedir}">
			  <include name="*.jar" />
			</fileset>
		  </classpath>
		</taskdef>
		
		<mkdir dir="${root.dir.path}" />
		<!--
			Specify resources to include in sprite generation. This is done on a per-component, per-skin basis.
			'dir' is the root directory that contains the sprite sources for the different skins of a component.
			'skin' is the name of the directory inside 'dir' to look for the files for a specific skin.
			'name' is the output name of the directory that will contain the generated files for the component inside the skin directory.
		-->
		<includeresources dir="src\org\icefaces\component\menubutton\skins" name="menubutton" skin="sam" />
		<includeresources dir="src\org\icefaces\component\pushbutton\skins" name="button" skin="sam" />
		<includeresources dir="src\org\icefaces\component\checkbox\skins" name="checkbox" skin="sam" />
		<includeresources dir="src\org\icefaces\component\radiobutton\skins" name="radiobutton" skin="sam" />
		<includeresources dir="src\org\icefaces\component\commandlink\skins" name="commandlink" skin="sam" />
		<includeresources dir="src\org\icefaces\component\datetimeselector\skins" name="calendar" skin="sam" />
		<includeresources dir="src\org\icefaces\component\slider\skins" name="slider" skin="sam" />
		<includeresources dir="src\org\icefaces\component\tab\skins" name="tabset" skin="sam" />
		<includeresources dir="src\org\icefaces\component\inputFiles\skins" name="inputfiles" skin="sam" />
		
		<includeresources dir="src\org\icefaces\component\datetimeselector\skins" name="calendar" skin="rime" />
		<includeresources dir="src\org\icefaces\component\tab\skins" name="tabset" skin="rime" />
		<includeresources dir="src\org\icefaces\component\inputFiles\skins" name="inputfiles" skin="rime" />
		<includeresources dir="src\org\icefaces\component\checkbox\skins" name="checkbox" skin="rime" />
		<includeresources dir="src\org\icefaces\component\radiobutton\skins" name="radiobutton" skin="rime" />
		<includeresources dir="src\org\icefaces\component\slider\skins" name="slider" skin="rime" />
		
		<!-- <includeresources dir="src\org\icefaces\component\commandlink\skins" name="commandlink" skin="rime" /> --> 

		<!-- Specify the names of the skins to process, based on the resources included above. -->
		<generatesprites skin="sam" />
		<generatesprites skin="rime" />
		
		<!--
			Map the URLs in the generated CSS files to the JSF2 format and place them in the corresponding library.
			There should be one declaration of 'mapsprites' for every 'includeresources' declaration.
			'library' is the name of the resource library where the resources will be reachable.
			'name' is the name of the component (or arbitrary set of resources).
			'skin' is the name of the processed skin.
		-->
		<mapsprites library="org.icefaces.component.menubutton" name="menubutton" skin="sam" />
		<mapsprites library="org.icefaces.component.pushbutton" name="button" skin="sam" />
		<mapsprites library="org.icefaces.component.checkbox" name="checkbox" skin="sam" />
		<mapsprites library="org.icefaces.component.radiobutton" name="radiobutton" skin="sam" />
		<mapsprites library="org.icefaces.component.commandlink" name="commandlink" skin="sam" />
		<mapsprites library="org.icefaces.component.datetimeselector" name="calendar" skin="sam" />
		<mapsprites library="org.icefaces.component.slider" name="slider" skin="sam" />
		<mapsprites library="org.icefaces.component.tab" name="tabset" skin="sam" />
		<mapsprites library="org.icefaces.component.inputFiles" name="inputfiles" skin="sam" />
		
		<mapsprites library="org.icefaces.component.datetimeselector" name="calendar" skin="rime" />
		<mapsprites library="org.icefaces.component.commandlink" name="calendar" skin="rime" />
		<mapsprites library="org.icefaces.component.tab" name="tabset" skin="rime" />
		<mapsprites library="org.icefaces.component.inputFiles" name="inputfiles" skin="rime" />
		<mapsprites library="org.icefaces.component.checkbox" name="checkbox" skin="rime" />
		<mapsprites library="org.icefaces.component.radiobutton" name="radiobutton" skin="rime" />
		<mapsprites library="org.icefaces.component.slider" name="slider" skin="rime" />
		
		<!-- copy sprite images to the sprites resource library -->
		<copy todir="${resources}/${sprites.lib}">
			<fileset dir="${output.dir.path}">
				<include name="**/*.png"/>
			</fileset>
		</copy>
		
	</target>
  
  
  <target name="smartsprites" description="Performs CSS sprite processing." if="${skin}.modified">

    <smartsprites rootdir="${root.dir.path}\${skin}"
                  documentrootdir="${document.root.dir.path}"
                  outputdir="${output.dir.path}\${skin}"
                  cssfileencoding="${css.file.encoding}"
                  cssfilesuffix="${css.file.suffix}"
                  loglevel="${log.level}"
                  spritepngdepth="${sprite.png.depth}"
                  spritepngie6="${sprite.png.ie6}" />
  </target>
  
	<target name="concatyuisam">
		<!-- concatenate yui files in a temporary file -->
		<concat destfile="${resources}/${skins.lib}/temp.css" append="true">
			<filelist dir="${resources}">
				<file name="yui/2_8_1/tabview/assets/skins/sam/tabview-skin.css" />
				<file name="yui/2_8_1/button/assets/skins/sam/button-skin.css" />
				<file name="yui/2_8_1/menu/assets/skins/sam/menu-skin.css" />
				<file name="yui/3_1_1/slider/assets/skins/sam/slider-skin.css" />
			</filelist>
		</concat>
		
		<!-- join with previously concatenated file -->
		<concat destfile="${resources}/${skins.lib}/temp.css" append="true">
			<filelist files="${resources}/${skins.lib}/sam.css" />
		</concat>

		<!-- replace previous sam.css file -->
		<copy file="${resources}/${skins.lib}/temp.css" tofile="${resources}/${skins.lib}/sam.css" overwrite="true" />
		
		<!-- remove temp file -->
		<delete file="${resources}/${skins.lib}/temp.css" />
	</target>

    <macrodef name="gen.tld.doc" description="Generate the TLD Doc in human readable form (HTML).">
        <attribute name="tld.file"/>
        <sequential>
            <delete dir="${tld.doc}"/>
    		<mkdir dir="${tld.doc}"/>
            <java jar="${tld.jar}/tlddoc.jar" fork="true" failonerror="true">
                <arg value="-d"/>
                <arg value="${tld.doc}"/>
                <arg value="-doctitle"/>
                <arg value="Sparkle Components"/>
                <arg value="-windowtitle"/>
                <arg value="Sparkle Components"/>
                <arg value="@{tld.file}"/>
            </java>
        </sequential>
    </macrodef>


    <target name="tlddoc" description="Generate the component TLD Documentation in HTML format.">
        <gen.tld.doc tld.file="${tld.file}"/>
    </target>
</project>
