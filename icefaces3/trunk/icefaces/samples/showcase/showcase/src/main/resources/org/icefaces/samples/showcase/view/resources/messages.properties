#
# Version: MPL 1.1
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations under
# the License.
#
# The Original Code is ICEfaces 1.5 open source software code, released
# November 5, 2006. The Initial Developer of the Original Code is ICEsoft
# Technologies Canada, Corp. Portions created by ICEsoft are Copyright (C)
# 2004-2011 ICEsoft Technologies Canada, Corp. All Rights Reserved.
#
# Contributor(s): _____________________.
#

showcase.title = ICEfaces Showcase
menu.ace.title = ACE Components
menu.compat.title = ICE Components
menu.ee.title = EE Components

menu.ace.tooltip = ACE Components suite showcase
menu.compat.tooltip = ICE Components suite showcase
################################################################################
# ICEfaces Advanced Components (ACE)                                           #
################################################################################

### ACE - Accordion Panel
menu.ace.accordionpanel.title = ace:accordion
menu.ace.accordionpanel.subMenu.title = Examples
menu.ace.accordionpanel.subMenu.main = Overview
menu.ace.accordionpanel.subMenu.dynamic = Pane Change
menu.ace.accordionpanel.subMenu.effect = Toggle Effect
# Overview
example.ace.accordionpanel.title = Overview
example.ace.accordionpanel.description = <p>Accordion Panel is a container component with collapsible / expandable tabs stacked vertically. Once placed on a page it can have any number of tabs each having its own content.</p>
# Dynamic
example.ace.accordionpanel.dynamic.title = Pane Change Listener Example
example.ace.accordionpanel.dynamic.description = <p>The paneChangeListener is used in scenarios where server side logic needs to be executed when a user switches between tabs. A convenient onPaneChangeUpdate can be bundled with paneChangeListener to partially update the page once AJAX call has been completed.</p>
# Effect
example.ace.accordionpanel.effect.title = Pane Change Effect Example
example.ace.accordionpanel.effect.description = <p>Effects can be added to the accordion panel  which will be activated on tab toggle. Default toggling of the tabs can be modified as well via event attribute.</p>

### ACE - CheckBoxButton
menu.ace.checkboxButton.title = ace:checkboxButton
menu.ace.checkboxButton.subMenu.title = Examples
menu.ace.checkboxButton.subMenu.main = Overview
# Overview
example.ace.checkboxButton.title = Overview
example.ace.checkboxButton.description = <p>The <b>&lt;ace:checkboxButton&gt;</b> binds to a bean boolean and can toggle its value. It does not submit forms, and it does not have an "action" attribute. Its primary use model is as a styled UI control for boolean input values rather than as a hook for events, navigation or form submission. Binding to values means the CheckboxButton implements the EditableValueHolder, and as such generates ValueChangedEvents as opposed to ActionEvents. <p>Below is an example of a checkboxButton backing a boolean value. For an example of a checkboxButton and a ValueChangeListener, read the overview example.</p>

### ACE - Confirm Dialog
menu.ace.confirmationdialog.title = ace:confirmationDialog
menu.ace.confirmationdialog.subMenu.title = Examples
menu.ace.confirmationdialog.subMenu.main = Overview
menu.ace.confirmationdialog.subMenu.modal = Modal
menu.ace.confirmationdialog.subMenu.effect = Effect
# Overview
example.ace.confirmationdialog.title = Overview
example.ace.confirmationdialog.description = <p>The ConfirmationDialog component generates a popup dialog with confirmation input. Client side APIs, <b>show()</b> and <b>hide()</b> functions, can be used to display and close the dialog. These functions can be called from other components, included in commandButton, commandLink, menuitem etc. Confirmation dialog attributes include:</p><ul><li><b>message </b>- message to display once dialog is displayed;<br></li><li><b>header </b>- header text to display;<br></li><li><b>width - </b>width of the dialog box in pixels;<br></li><li><b>height - </b>height of the dialog box in pixels;<br></li><li><b>closable - </b>define if icon to close the dialog should be rendered;<b><br></b></li><li><b>closeOnEscape - </b>setting this to false will prevent user from closing the dialog via Esc button;</li><li><b>position: </b>can be defined as string values like \u2018center\u2019, \u2018left\u2019, \u2018right\u2019, \u2018top\u2019, \u2018bottom\u2019 or as comma separated X and Y coordinate values like 600, 200;<b><br></b></li></ul>
# Modal
example.ace.confirmationdialog.modal.title = Modal Confirmation Example
example.ace.confirmationdialog.modal.description = <p>If <b>modal</b> attribute set to true, other items on the page will be disabled (i.e. cannot be interacted with). Modality creates an overlay below the dialog but above other page elements.</p>
# Effect
example.ace.confirmationdialog.effect.title = Confirmation Dialog Display Effects Example
example.ace.confirmationdialog.effect.description = <p>Different effects are supported by the confirmationDialog component. <b>showEffect </b>and <b>hideEffect</b> attributes can be used in order to customize dialog animation. Possible options are: <i>blind bounce, clip, drop, explode, fade, fold, highlight, puff, pulsate, scale, shake, size, slide, transfer.</i></p>

### ACE - Context Menu
menu.ace.contextMenu.title = ace:contextMenu
menu.ace.contextMenu.subMenu.title = Examples
menu.ace.contextMenu.subMenu.main = Overview
menu.ace.contextMenu.subMenu.global = Global
menu.ace.contextMenu.subMenu.component = Component
menu.ace.contextMenu.subMenu.table = In a Table
menu.ace.contextMenu.subMenu.effect = Effect
# Overview
example.ace.contextMenu.title = Overview
example.ace.contextMenu.description = <p>The ACE Context Menu component provide a robust popup menu system when a designated page region is right clicked. The example below demonstrate usage of the context menu on an application wide basis (global).</p>
# Component
example.ace.contextMenu.component.title = Per Component Context Menu Example
example.ace.contextMenu.component.description = <p>Enables context menu functionality on a page / instance basis.</p>
# In Table
example.ace.contextMenu.table.title = Table Integration Example
example.ace.contextMenu.table.description = <p>The context menu table component provides context menu functionality within a data table. Right-click on the data table below to optionally add or undo addition of the items in the list.</p>
# Effect
example.ace.contextMenu.effect.title = Context Menu Display Effects Example
example.ace.contextMenu.effect.description = <p>Transition effects can be applied to context menu. Right-click on the image to display a context menu using the effect specified below.</p>

### ACE - Data Exporter
menu.ace.dataExporter.title = ace:dataExporter
menu.ace.dataExporter.subMenu.title = Examples
menu.ace.dataExporter.subMenu.main = Overview
menu.ace.dataExporter.subMenu.columns = Specify Columns
# Overview
example.ace.dataExporter.title = Overview
example.ace.dataExporter.description = <p>The dataExporter component is used to export data table content into CSV, XLS, PDF and XML formats.</p>
# Columns
example.ace.dataExporter.columns.title = Criteria Based Export Example
example.ace.dataExporter.columns.description = <p>The dataExporter functionality can be used to point into specific data table columns for export.</p>

### ACE - Data Table
menu.ace.dataTable.title = ace:dataTable
menu.ace.dataTable.subMenu.title = Examples
menu.ace.dataTable.subMenu.main = Overview
menu.ace.dataTable.subMenu.filtering = Filtering
menu.ace.dataTable.subMenu.sorting = Sorting
menu.ace.dataTable.subMenu.paginator = Paginator
menu.ace.dataTable.subMenu.scrolling = Scrolling
menu.ace.dataTable.subMenu.lazyLoading = Lazy Loading
menu.ace.dataTable.subMenu.selector = Row Selector
menu.ace.dataTable.subMenu.listener = Row Listener
menu.ace.dataTable.subMenu.rowexpansion = Row Expansion
menu.ace.dataTable.subMenu.panelexpansion = Panel Expansion
menu.ace.dataTable.subMenu.configpanel = Table Config
menu.ace.dataTable.subMenu.rowstate = Row State
menu.ace.dataTable.subMenu.stackable = Column Stacking
menu.ace.dataTable.subMenu.columnReordering = Column Reorder
# Overview
example.ace.dataTable.title = Overview
example.ace.dataTable.description = <p>The <b>&lt;ace:dataTable&gt;</b> is a rich data grid component and arguably the most comprehensive and versatile component available in ICEfaces 2.1 Component Suite. A large set of features is supported by this tag including sorting, scrolling, pagination, data filtering, lazy loading, column stacking etc. are just a few options available right out of the box.</p>
# Column Reordering
example.ace.dataTable.columnReordering.title = Column Reordering Example
example.ace.dataTable.columnReordering.description = <p>Columns can be moved around by dragging and dropping them if columnOrdering attribute of the <b>&lt;ace:dataTable&gt;</b> is set to true.</p>
# Filtering
example.ace.dataTable.filtering.title = Filtering Example
example.ace.dataTable.filtering.description = <p>Enter the character combination you wish to filter for by column in the blank field under the column header information to view column filtering.</p>
# Sorting
example.ace.dataTable.sorting.title = Sorting Example
example.ace.dataTable.sorting.description = <p>Click on the up/down arrows embedded in the data table header fields to sort data in ascending or descending orders.</p>
# Paginator
example.ace.dataTable.paginator.title = Paginator Example
example.ace.dataTable.paginator.description = <p>Use the navigational controls embedded at the bottom of the data table to view specific data table pages, to increment / decrement page views or to skip to first / last pages. Use the control inputs located above the table to modify data table formatting options.</p>
# Scrolling
example.ace.dataTable.scrolling.title = Scrolling Example
example.ace.dataTable.scrolling.description = <p>Use the scroll wheel function on your mouse or touchpad, or the scroll bar located to the right of the table to scroll up or down through data table rows. Enable scrolling and table formatting (height) through the data fields located above the data table.</p>
#Lazy Loading
example.ace.dataTable.lazyLoading.title = Lazy Loading Example
example.ace.dataTable.lazyLoading.description = <p>This table load over 3,000,000+ records of random cars and display 31 of them per page. Use the Data Table paginator option  to move between pages. Notice that during navigation the table data is loaded lazily</p>
# Selector
example.ace.dataTable.selector.title = Row Selector Example
example.ace.dataTable.selector.description = <p>Data Table Row Selector functionality allows users to select one or multiple rows / cells within a data table.  The selected row/cell is identified by formatted color change within the table and via the status information located below the data table.  Cell/Row selection toggles on/off with each click.  Selection behavioral attributes are set in the entry fields located above the table.</p>
# Listener
example.ace.dataTable.listener.title = Row Listener Example
example.ace.dataTable.listener.description = <p>Server side listeners for row selection or deselection events can be added to the data table. Next steps will be required in order to perform this functionality:</p><ul><li><b>&raquo;</b> Set <b>rowSelectListener / rowUnselectListener</b> attributes to point on the methods which will be invoked on the server side when the data table row is selected or unselected;</li><li><b>&raquo;</b> Create server side methods with following signatures:<i> </i><b>void methodName(SelectEvent event), public void methodName(UnselectEvent event);</b></li></ul>
# Row Expansion
example.ace.dataTable.rowexpansion.title = Row Expansion Example
example.ace.dataTable.rowexpansion.description = <p>In order to make rows of the data table expandable two helper tags must be used. The first one is called <b>&lt;ace:expansionToggler&gt;</b>and must be placed inside of the empty <b>&lt;ace:column&gt;</b> component. The second one is <b>&lt;ace:rowExpansion&gt;</b>and must be placed anywhere inside of the <b>&lt;ace:dataTable&gt;</b>.</p><p>Click on the row expansion arrows to the left side of the table to expand / collapse table row entries.</p>
# Panel Expansion
example.ace.dataTable.panelexpansion.title = Panel Expansion Example
example.ace.dataTable.panelexpansion.description = <p>In order to use panel expansion feature of the data table two helper tags must be used. The first one is called <b>&lt;ace:expansionToggler&gt;,</b>which must be placed inside of the empty <b>&lt;ace:column&gt;</b> component. The second one is <b>&lt;ace:panelExpansion&gt;</b> and must be placed anywhere inside of the <b>&lt;ace:dataTable&gt;</b>.</p><p>Click on the arrows in the leftmost column to expand and collapse inserted panel views.</p>
# Table Config
example.ace.dataTable.configpanel.title = User Control Panel Example
example.ace.dataTable.configpanel.description = <p>Datatable structure can be configured via the helper tag <b>&lt;ace:tableConfigPanel&gt;</b>. This tag features next attributes to help with table modifications:</p><ul><li><b>forTarget </b>\u2013 string data table id;</li><li><b>columnNameConfigurable </b>- if set to true, enable user to re-name columns for the targeted data table;</li><li><b>columnOrderingConfigurable </b>- if set to true, enable user to re-order columns sequence via drag and drop activity;</li><li><b>columnSizingConfigurable </b>- if set to true, enable user to re-size columns of the data table;</li><li><b>columnSortingConfigurable </b>- if set to true, enable data table sort on specified column in descending or ascending order;</li><li><b>columnVisibilityConfigurable </b>- if set to true, enable user to set which columns of the data table should be displayed;</li></ul><p>To view the Data Table User Control Panel click on the \u201cgear\u201d icon in the rightmost cell of the table header.</p>
# Row State
example.ace.dataTable.rowstate.title = Row State Example
example.ace.dataTable.rowstate.description = <p>Provides enhanced control for row selection, visibility and cell / row editability features. Select desired options from the input panel above the data table. To edit cell contents select Enable Editing for All or Selected. Click on the desired row and click on the pencil icon located in the rightmost column of the row you wish to edit. Edit the desired field and click the check mark icon in the edit column to confirm.</p>
# Column Stacking
example.ace.dataTable.stackable.title = Stackable Columns Example
example.ace.dataTable.stackable.description = <p>Enables stacking of column information to facilitate viewing options. This demo illustrates a 7 column data table rendered in 4 columns.</p>

### ACE - Date Time Entry
menu.ace.dateentry.title = ace:dateTimeEntry
menu.ace.dateentry.subMenu.title = Examples
menu.ace.dateentry.subMenu.main = Overview
menu.ace.dateentry.subMenu.popup = Popup
menu.ace.dateentry.subMenu.ajax = Ajax Submit
menu.ace.dateentry.subMenu.pages = Multiple Months
menu.ace.dateentry.subMenu.navigator = Navigator
# Overview
example.ace.dateentry.title = Overview
example.ace.dateentry.description = <p> <b>&lt;ace:dateTimeEntry&gt;</b> is an input component used to input a date in a visual way. In addition to basic features the component supports paging, localization, ajax selection and more</p>
# Popup
example.ace.dateentry.popup.title = Date Entry Popup Example
example.ace.dateentry.popup.description = <p>View either the popup or input text version</p>
# Ajax Submit
example.ace.dateentry.ajax.title = Date Entry Ajax Submit Example
example.ace.dateentry.ajax.description = <p>Submit the date using Ajax</p>
# Multiple Months
example.ace.dateentry.pages.title = Date Entry Multiple Months Example
example.ace.dateentry.pages.description = <p>Display multiple pages of months in a single calendar</p>
# Navigator
example.ace.dateentry.navigator.title = Date Entry Dropdown Navigator Example
example.ace.dateentry.navigator.description = <p>Display the year and month as a dropdown</p>

### ACE - Dialog
menu.ace.dialog.title = ace:dialog
menu.ace.dialog.subMenu.main = Overview
menu.ace.dialog.subMenu.effectsAndSize = Effects & Size
menu.ace.dialog.subMenu.modalDialog = Modal & Movable
# Overview
example.ace.dialog.title = Overview
example.ace.dialog.description = <p>A dialog is a floating window that contains a title bar and a content area. The dialog component can be moved, resized and closed (via mouse click on "X" or by pressing the Esc button) by  default. If the content length exceeds the maximum height, a scrollbar will automatically appear. Some popular options that can be applied to the dialog are: semi-transparent modal overlay layer, hide and open effects and minimum height and width.</p>
# Size & Effects
example.ace.dialog.dialogEffectAndSize.title = Dialog Animation Effects and Size Configurability Example
example.ace.dialog.dialogEffectAndSize.description = <p>Dialog <b>minWidth</b> and <b>minHeight</b> properties can be used to achieve desired dialog size. There are also various effect options, that can be used when displaying and closing the dialog. Use <b>showEffect</b> and <b>hideEffect </b>options to apply these effects; Here is the list of possible options: <i>blind, bounce, clip, drop, explode, fade, fold, highlight, puff, pulsate, scale, shake, slide.</i></p>
# Modal Dialog
example.ace.dialog.modalDialog.title = Modal and Movable Dialog Examples
example.ace.dialog.modalDialog.description = <p>If modal option set to true, other items on the page will be disabled (i.e. cannot be interacted with). Modal dialogs create an overlay below the dialog but above other page elements.</p>

### ACE - Drag and Drop
menu.ace.dragDrop.title = ace:draggable/droppable
menu.ace.dragDrop.subMenu.main = Overview
menu.ace.dragDrop.subMenu.draggable = Draggable
menu.ace.dragDrop.subMenu.dataTableIntegration = Table Integration
# Overview
example.ace.dragDrop.title = Overview
example.ace.dragDrop.description = <p>Drag and Drop options are available in ICEfaces via two distinctive components <b>&lt;ace:draggable&gt;</b> and <b>&lt;ace:droppable&gt;</b>. The Drop component also has a proximity to establish what % of alignment is required between the object and the drop target.  In the demo below the droppable item must be 100% aligned within the drop box.</p>
# Draggable 
example.ace.draggable.title = Draggable Component Example
example.ace.draggable.description = <p>Draggable component features a list of customizable options which can be adjusted according to application requirements.</p>
# Data Table Integration
example.ace.dataTableIntegration.title = Data Table Integration Example
example.ace.dataTableIntegration.description = <p>Draggable and droppable behaviour can be integrated with data table.</p>

### ACE - FileEntry
menu.ace.fileentry.title = ace:fileEntry
menu.ace.fileentry.subMenu.title = Examples
menu.ace.fileentry.subMenu.main = Overview
menu.ace.fileentry.subMenu.basic = Basic
menu.ace.fileentry.subMenu.validation = Validation
menu.ace.fileentry.subMenu.multiple = Multiple
menu.ace.fileentry.subMenu.failpop = Failed Popup
# Overview
example.ace.fileentry.title = Overview
example.ace.fileentry.description = <p>The ACE File Entry Component performs all interface functions regarding file submission. The example below demonstrates:</p> <ul><li> - A FileEntryListener that adds a message with the uploaded file size and size of the temp directory.</li><li> - Limits file size to 6MB.</li><li> - Requires file for form submission.</li><li> - Stores the file with the original filename in a web-root relative path.</li></ul>
# Basic
example.ace.fileentry.basic.title = Basic Upload Example 
example.ace.fileentry.basic.description = <p>The basic file entry example below will receive a file and put it in a sub-directory directly inside the root application directory. That sub-directory will be unique to each session, and all the files uploaded to it will be given randomly generated name. The ace:fileEntry tag used on this page has no attributes set.</p>
# Validation Options
example.ace.fileentry.valid.title = Validation Example 
example.ace.fileentry.valid.description = <p>The file entry example below demonstrates attributes related to the validity of the uploaded file, and the state of the component in the form (disabled/required)</p>
# Multiple File Upload Options
example.ace.fileentry.multiple.title = Multiple Upload Example 
example.ace.fileentry.multiple.description = <p>The file entry example below demonstrates attributes related to functionality of the component that has not yet been completed, though they are documented in the TLD.</p>
# Fail Popup
example.ace.fileentry.failpop.title = Popup Validation Example
example.ace.fileentry.failpop.description = <p>The file entry example below demonstrates a compound example of functionality whose completion that is waiting on a showcase wide popup component.</p>

### ACE - LinkButton
menu.ace.linkButton.title = ace:linkButton
menu.ace.linkButton.subMenu.title = Examples
menu.ace.linkButton.subMenu.main = Overview
# Overview
example.ace.linkButton.title = Overview
example.ace.linkButton.description = <p>The <b>&lt;ace:linkButton&gt;</b>component can be used for: executing listeners, action navigation and form submission. The LinkButton component is built around the HTML anchor tag, and as such it can be used to perform non-jsf "static" HTML navigation from the current URL to a different relative or absolute URL.</p><p>The example below demonstrates buttons that avoid form submission, perform form submission, perform Action navigation, HTML navigation and listener-based view forwarding.</p>

### ACE - Masked Entry
menu.ace.maskedEntry.title = ace:maskedEntry
menu.ace.maskedEntry.subMenu.main = Overview
# Overview
example.ace.maskedEntry.title = ACE Masked Entry Component
example.ace.maskedEntry.description = <p>The Masked Entry Component is a text input component that forces input to be formatted in a specific way. Masked definition of the components are not regular expressions. When setting a mask for this component the following definitions can be used:</p><ul><li><b>\u201ca\u201d</b> \u2013 represents alphabetical characters (A...Z, a...z);</li><li><b>\u201c9\u201d</b> - represents a numeric character (0...9); </li><li><b>\u201c*\u201d</b> - represents an alphanumeric character (A..Z, a...z, 0...9);</li><li><b>\u201c?\u201d</b> \u2013marks the point in the mask after which any entered characters are optional (mask will not reset itself on lost focus);</li></ul>

### ACE - Menu
menu.ace.menu.title = ace:menu
menu.ace.menu.subMenu.title = Examples
menu.ace.menu.subMenu.main = Overview
menu.ace.menu.subMenu.type = Type
menu.ace.menu.subMenu.events = Action Events
menu.ace.menu.subMenu.effect = Effects
menu.ace.menu.subMenu.display =  Trigger Events
menu.ace.menu.subMenu.dynamic = Dynamic
# Overview
example.ace.menu.title = Overview
example.ace.menu.description = <p>The ACE Menu Components provide general purpose page / application navigational and input features. They support various animation effects, layout formats and positioning options.</p>
# Type
example.ace.menu.type.title = Menu Type Example
example.ace.menu.type.description = <p>ACE Menu Components support plain, tiered, and sliding menu types.</p>
# Events
example.ace.menu.events.title = Menu Events Example
example.ace.menu.events.description = <p>ACE Menu Components support action listeners and links.</p>
# Effects
example.ace.menu.effect.title = Menu Effects Example
example.ace.menu.effect.description = <p>ACE Menu Components support a variety of transitional effects.</p>
# Display
example.ace.menu.display.title = Event Triggered Menu Example
example.ace.menu.display.description = <p>The Menu Display feature allows menus to appear / popup during mouse overs of specific page regions.  Mouse over the button below to demonstrate.  Click outside the menu region to cause the menu to disappear.</p>
# Dynamic
example.ace.menu.dynamic.title = Menu Dynamic Example
example.ace.menu.dynamic.description = <p>Dynamic menu description</p>

### ACE - Menu Bar
menu.ace.menuBar.title = ace:menubar
menu.ace.menuBar.subMenu.title = Examples
menu.ace.menuBar.subMenu.main = Overview
menu.ace.menuBar.subMenu.effect = Effects
menu.ace.menuBar.subMenu.click = Click to Display
menu.ace.menuBar.subMenu.dynamic = Dynamic
# Overview
example.ace.menuBar.title = Overview
example.ace.menuBar.description = <p>The ACE Menu Bar Components provide customizable menu functions in a traditional menu bar format.</p>
# Effects
example.ace.menuBar.effect.title = Menu Bar Effects Example
example.ace.menuBar.effect.description = <p>Menu Bar supports a variety of transitional effects.</p>
# Click to Display
example.ace.menuBar.click.title = Menu Bar Click to Display Example
example.ace.menuBar.click.description = <p>On mouse over menu auto display feature can be enabled or disabled via convenient component attribute</p>
# Dynamic
example.ace.menuBar.dynamic.title = ACE Menu Bar Dynamic Example
example.ace.menuBar.dynamic.description = <p>The ability to modify (add / delete) Menu Bar elements dynamically is seen in the example below.</p>

### ACE - Notification Panel
menu.ace.notificationpanel.title = ace:notificationPanel
menu.ace.notificationpanel.subMenu.title = Examples
menu.ace.notificationpanel.subMenu.main = Overview
# Overview
example.ace.notificationpanel.title = Overview
example.ace.notificationpanel.description = <p> Notification Panel is a container component. Any content can be placed inside it. Notification panel features next set of options:</p><ul><li><b>widgetVar.<i>show()</i></b> and <b>widgetVar.<i>hide()</i></b> - convenient client side API to show and hide the panel respectfully</li><li><b>Effects</b>: fade (default), slide, none (if you would like to turn off animation)</li><li><b>Effect speed</b>: 'normal', 'slow', 'fast'</li><li><b>Position</b>: top(default), bottom</li></ul><p>Click on the button bellow to see some of those features:</p>

### ACE - Panel
menu.ace.panel.title = ace:panel
menu.ace.panel.subMenu.title = Examples
menu.ace.panel.subMenu.main = Overview
menu.ace.panel.subMenu.header = Headers
menu.ace.panel.subMenu.toggle = Toggleable
menu.ace.panel.subMenu.close = Closeable
menu.ace.panel.subMenu.listener = Listeners
menu.ace.panel.subMenu.menu = Menu
# Overview 
example.ace.panel.title = Overview
example.ace.panel.description = <p>The ACE Panel Component is a generic layout container that supports custom header / footers, accordion toggling, open, close and menu features.</p>
# Headers
example.ace.panel.header.title = Panel Header and Footer Example
example.ace.panel.header.description = <p>The example below demonstrates dynamic addition, deletion of panel header / footer text.</p>
# Toggleable
example.ace.panel.toggle.title = Toggleable Panel Example
example.ace.panel.toggle.description = <p>The Toggleable example below illustrates how the ACE Panel Component can be expanded or collapsed by the viewer.</p>
# Closeable
example.ace.panel.close.title = Closeable Panel Example
example.ace.panel.close.description = <p>The Closeable example below illustrates how the ACE Panel Component can be opened or closed by the viewer.</p>
# Listener
example.ace.panel.listener.title = Panel Listener Example
example.ace.panel.listener.description = <p>The ACE Panel Listener example below illustrates various toggle events captured by the Listener.  Click on the \u201c-\u201c and \u201cx\u201d buttons to the right of the panel and watch the Listener Status report update.</p>
# Menu
example.ace.panel.menu.title = Panel Menu Example
example.ace.panel.menu.description = <p>The ACE Panel Menu example illustrates menu integration within a panel component.  Press the icon on the top right corner of the panel header to expose the menu options pertaining to the panel.</p>

### ACE - Progress Bar
menu.ace.progressbar.title = ace:progressBar
menu.ace.progressbar.subMenu.title = Examples
menu.ace.progressbar.subMenu.main = Overview
menu.ace.progressbar.subMenu.polling = Polling
menu.ace.progressbar.subMenu.push = Push
menu.ace.progressbar.subMenu.client = Client Side
menu.ace.progressbar.subMenu.clientAndServer = Client/Server
# Overview
example.ace.progressbar.title = Overview
example.ace.progressbar.description = <p>ProgressBar is a status indicator that can work on client side only or interact with server via AJAX.</p><p>The example below demonstrate basic features of the progress bar. For more specific examples please check other sections of this showcase.</p>
# Polling
example.ace.progressBarPoling.title = Progress Bar Polling Example
example.ace.progressBarPoling.description = <p>AJAX Polling feature can be applied to the progress bar.</p><ul><li><b>pollingInterval (int) </b>- set progress bar polling interval, default value is 3000 ms;</li><li><b>usePolling (boolean)</b> - enable AJAX polling feature when set to true, default value is false;</li><li><b>widgetVarName.start() (client side API) </b>- start AJAX polling </li><li><b>widgetVarName.cancel() (client side API) </b>- cancel AJAX polling </li><li><b>completeListener </b>- server side listener to execute once progress reaches 100%</li></ul><p>To see polling in action, select a picture from the drop down menu below. Once selected the picture will appear in the 'Upload Manager' (not shown initially). Click on the upload button in the manager to start AJAX polling.</p>
# Push
example.ace.progressBarPush.title = Progress Bar With Push Example
example.ace.progressBarPush.description = <p>ICEfaces Push can be used with progress bar. Open 2 different browsers and point them to this page. Click start button in one of them. Notice how running progress in one browser send updates to another via Push.</p>
# Progress Bar on Client Side
example.ace.progressBarClientSideOnly.title = Client Side Progress Bar Example
example.ace.progressBarClientSideOnly.description = <p>Progress bar can operate purely on the client side. Click the 'Start' button to begin progress or 'Cancel' button to stop it while progress is running.</p>
#Progress Bar on Client and Server side
example.ace.progressBarClientAndServer.title =  Client + Server Side Progress Bar Example
example.ace.progressBarClientAndServer.description = <p>Client side JavaScript API of the progressBar component can be used in conjunction with its server side listeners. This example demonstrates:</p><ul><li><b>widgetVar.setValue()</b> and <b>widgetVar.getValue()</b> - client side API methods useful to increase or decrease the value of a progressBar;</li><li><b>changeListener</b>- server side listener which is called on each modification of the progress bar state;</li></ul><p>Click on the buttons to see above features in action</p>

### ACE - PushButton
menu.ace.pushButton.title = ace:pushButton
menu.ace.pushButton.subMenu.title = Examples
menu.ace.pushButton.subMenu.main = Overview
# Overview
example.ace.pushButton.title = Overview
example.ace.pushButton.description = <p>The <b>&lt;ace:pushButton&gt;</b> component performs basic button functionality and can be used for:</p> <ul><li><b>&raquo;</b> executing listeners</li> <li><b>&raquo;</b> action navigation and</li> <li><b>&raquo;</b> form submission</li></ul><p>The example below demonstrates various button implementations that avoid form submission, perform form submission, perform Action navigation and listener-based view forwarding.</p>

### ACE - Resizable
menu.ace.resizable.title = ace:resizable
menu.ace.resizable.subMenu.main = Overview
menu.ace.resizable.subMenu.resizeListener = Resize Listener
# Overview
example.ace.resizable.title = Overview
example.ace.resizable.description = <p>Resizable component has the ability to make any JSF component resizable. Resizable can be used on various components like input fields, panels, menus, images etc. Component options allow the Resizing functions to operate in one or two directions as illustrated below.</p>
# Resizable Listener
example.ace.resizableListener.title = Resizable Listener Example
example.ace.resizableListener.description = <p>A listener can be attached to the resizable component in order to process custom server side logic.</p>

### ACE - Slider
menu.ace.slider.title = ace:sliderEntry
menu.ace.slider.subMenu.title = Examples
menu.ace.slider.subMenu.main = Overview
menu.ace.slider.subMenu.basic = Synchronous
menu.ace.slider.subMenu.async = Asynchronous
menu.ace.slider.subMenu.asyncinput = Input
# Overview
example.ace.slider.title = Overview
example.ace.slider.description = <p>The SliderEntry is a scalable input component. The example below demonstrates a variety of the attributes available such as:</p><ul><li>- Setting a value by clicking the slider path.</li><li>- A fixed min/max &amp; length.</li><li>- Asynchronous submission of the value of the slider.</li></ul>
# Basic
example.ace.slider.basic.title = Basic Slider Example
example.ace.slider.basic.description = <p>The following example illustrates basic slider function in synchronous mode. Drag the slider left or right and click on \u201cSet Slider Value\u201d button to view the value.  Various layout and functional options are available on the right.</p>
# Asynchronous
example.ace.slider.async.title = AJAX Slider Example
example.ace.slider.async.description = <p>The following example illustrates basic slider function in asynchronous mode. Drag the slider left or right.  Value automatically updates upon mouse up even associated with releasing the slider. Various layout and functional options are available on the right.</p>
# Ansynchronous Input
example.ace.slider.asyncinput.title = Ansynchronous Input Slider Example
example.ace.slider.asyncinput.description = <p>The following example illustrates basic slider function in asynchronous input mode. Slider position automatically updates when you input a value between -30 and 150 in the input box and then hit the enter key. Various layout and functional options are available on the right.</p>

### ACE - TabSet
menu.ace.tabSet.title = ace:tabSet
menu.ace.tabSet.subMenu.title = Examples
menu.ace.tabSet.subMenu.main = Overview
menu.ace.tabSet.subMenu.clientSide = Client Side
menu.ace.tabSet.subMenu.serverSide = Server Side
menu.ace.tabSet.subMenu.proxy = Proxy
# Overview
example.ace.tabSet.title = Overview
example.ace.tabSet.description = <p>The TabSet Component is used to divvy up the content of a page into panels that are shown one at a time. These panels can either be stored in the browser to reduce load times, or on server to reduce initial bandwidth demands. The component can be run within a form, or have the tabPanes contain their own forms, having the tabSet do communications via a 'TabSet Proxy'.</p><p>The TabSet example below is one without any attributes set. It hosts its tabPanes server-side and has hardcoded labels and content.</p>
# Client Side
example.ace.tabSet.clientSide.title = Client Side TabSet Example
example.ace.tabSet.clientSide.description = <p>Below is a demo of the TabSet component where the contents of the TabPanes are kept loaded in the clients browsers, eliminating any data transfer to change tabs.</p><p>The 'Fast Loading Tabs' option toggles a wait that will occur whenever a tab is fetched from the server.</p>
# Server Side
example.ace.tabSet.serverSide.title = Server Side TabSetExample
example.ace.tabSet.serverSide.description  = <p>Below is a demo of the TabSet component where the contents of the TabPanes are kept in the server, requiring less initial data transfer, but needing to transfer the contents every time the tab is changed.</p><p>The 'Fast Loading Tabs' option toggles a wait that will occur whenever a tab is fetched from the server.</p>
# Proxy
example.ace.tabSet.proxy.title = TabSet Proxy Example
example.ace.tabSet.proxy.description = <p>Below is a demo of the TabSet component where the the tabSetProxy tag is used. This tag allow the tabSet to be located outside of a form, (allowing tabPanes to contain their own forms) while keeping a means to communicate with the server, via a 'proxy' in the nested form specifically for its traffic.</p>

### ACE - Tooltip
menu.ace.tooltip.title = ace:tooltip
menu.ace.tooltip.subMenu.title = Examples
menu.ace.tooltip.subMenu.main = Overview
menu.ace.tooltip.subMenu.globalTooltip = Global
# Overview
example.ace.tooltip.title = Overview
example.ace.tooltip.description = <p>ACE Tooltip provide rich set of customizable options right out of the box. Next set of attributes are available for this component:</p><ul><li><b>showEffect</b> and <b>hideEffect</b>(String) - animation effect to use when tooltip appear or disappear, default value is 'fade';</li><li><b>showEffectLength </b>and <b>hideEffectLength </b>(String) - duration of the effect animation, default values is 100ms;</li><li><b>showDelay</b> and <b>hideDelay</b>(int) - tooltip delay timers, default values are 140ms and 0ms;</li><li><b>showEvent</b> and <b>hideEvent</b>(String) - DOM event name which should cause the tooltip to pop, default value is 'mouseover';</li><li><b>targetPosition</b>(String) - corner of the target element to position the tooltip by, default value is 'bottomRight';</li><li><b>position</b>(String) - corner of the tooltip to position the target's position, default value is 'topLeft';</li><li><b>global </b>(boolean) - if set to true, converts each title attribute to the ace:tooltip</li><li><b>for</b> (String) - id of the component to attach the tooltip</li></ul><p>The example below demonstrate various features of the tooltip component.</p>
# Global
example.ace.globalTooltip.title = Global Tooltip Example
example.ace.globalTooltip.description = <p>ACE Tooltip can be used in a global mode. Set global attribute of the tooltip as TRUE to enable this feature. In this mode all components on the page which have the title attribute set will have their regular tooltip replaced with ace:tooltip </p>

### ACE - Logger
menu.ace.logger.title = Logger
menu.ace.logger.subMenu.title = Examples
menu.ace.logger.subMenu.main = Overview
# Overview
example.ace.logger.title = Logger Component
example.ace.logger.description = <p>The ACE Logger component is based around the one offered by the YUI toolkit, providing a standardized way of reading and writing log messages. When the tag is present on the page it adds divs containing the log controls to the root of the DOM. In this example, to prevent root placement from breaking page flow, the class .yui-log-container is positioned to fixed values similarly to a popup. The logs will have a record for every Javascript call to YAHOO.log().</p><p>The example below has a button to display the logger and some example controls to generate arbitrary Javascript messages using YAHOO.log().</p>

################################################################################
# UNUSED messages
################################################################################
### ACE - Button
menu.ace.button.title = Buttons
menu.ace.button.subMenu.title = Examples
menu.ace.button.subMenu.main = Overview
# Overview
example.ace.button.title = ACE Button Components
example.ace.button.description = <p>The ACE Button Components provide the functionality of the standard JSF implementations while integrating ICEfaces features such as Single Submit. Buttons can be used for:</p><p>1. Action navigation via the application NavigationController and the "action" attribute.<br/>2. Presenting a clickable UI control for a listener<br/>3. Performing a full form submission when <b>&lt;f:ajax&gt;</b> or singleSubmit is not being used.<br></p><p>Below is a example of each button configured as the control for a simple listener.</p>
################################################################################
# ICEfaces Compat Components (COMPAT)                                          #
################################################################################

### COMPAT - Columns
menu.compat.columns.title = ice:columns
menu.compat.columns.subMenu.title = Examples
menu.compat.columns.subMenu.main = Overview
menu.compat.columns.subMenu.checker = Checkerboard
# Overview
example.compat.columns.title = Overview
example.compat.columns.description = <p>Basic overview of the columns component.</p>
# 2D Array
example.compat.columns.checker.title = Checkerboard Example
example.compat.columns.checker.description = <p>Example rendering a checkerboard using the columns component.</p>

### COMPAT - Data Table (Exporter)
menu.compat.exporter.title = ice:dataExporter
menu.compat.exporter.subMenu.title = Examples
menu.compat.exporter.subMenu.main = Overview
menu.compat.exporter.subMenu.type = Type
menu.compat.exporter.subMenu.column = Include Columns
menu.compat.exporter.subMenu.pagination = Ignore Pagination
menu.compat.exporter.subMenu.label = Custom Label
# Overview
example.compat.exporter.title = Overview
example.compat.exporter.description = <p>The exporter component lets users download the contents of a data table as either a CSV or Excel file, which can be useful for saving search results or other information traditionally displayed with a data table. From a developer perspective the exporter is simple to use, as they just include the component in the page to enable the functionality. Labels and other options can be customized as needed.</p><p>Click the "Download as CSV" link to save the data table below as a file full of comma-separated-values.</p>
# Type
example.compat.exporter.type.title = Custom File Type Export Example
example.compat.exporter.type.description = <p>Select which file type will be used for export below.</p>
# Include Columns
example.compat.exporter.column.title = Custom Columns Export Example
example.compat.exporter.column.description = <p>Select which which columns to include in the export below.</p>.
# Ignore Pagination
example.compat.exporter.pagination.title = Ignore Pagination Example
example.compat.exporter.pagination.description = <p>Pagination of the table can be ignored or accounted for during data export</p>
# Custom Label
example.compat.exporter.label.title = Exporter Custom Label Example
example.compat.exporter.label.description = <p>Render a button, image, or custom text for the label.</p>


### COMPAT - Auto Complete
menu.compat.autocomplete.title =  ice:selectInputText
menu.compat.autocomplete.subMenu.title = Examples
menu.compat.autocomplete.subMenu.main = Overview
menu.compat.autocomplete.subMenu.simple = Simple
menu.compat.autocomplete.subMenu.complex = Complex
menu.compat.autocomplete.subMenu.rows = Rows
# Overview
example.compat.autocomplete.title = Overview
example.compat.autocomplete.description = <p>Start typing a City into the provided input field. As you type a list of available city options will be filtered and displayed. Navigation of this menu can be done using the keyboard arrows or the mouse. Selecting a city will automatically submit it to the server, or further typing can be done to reduce the filtered results further.The "Current Results" field displays how many cities match the currently typed text, and will narrow accordingly. If no matches are found the filter will reset to check the first letter only.From a developer perspective the filtering of autocomplete results is done in the backend, which allows greater customization of how to match. The displayed options can be customized to use a richer appearance of any complex components, instead of just plain text.</p>
# Simple
example.compat.autocomplete.simple.title = Auto Complete Simple
example.compat.autocomplete.simple.description = <p>Simple example of the Auto Complete component.</p>
# Complex
example.compat.autocomplete.complex.title = Auto Complete Complex
example.compat.autocomplete.complex.description = <p>Complex example showing advanced formatting of the selectable items.</p>
# Rows
example.compat.autocomplete.rows.title = Auto Complete Rows
example.compat.autocomplete.rows.description = <p>Customize the appearance of the Auto Complete component by modifying the number of displayed rows.</p>

### COMPAT - Border Panel
menu.compat.border.title = ice:panelBorder
menu.compat.border.subMenu.title = Examples
menu.compat.border.subMenu.main = Overview
menu.compat.border.subMenu.layout = Layout
menu.compat.border.subMenu.render = Render
menu.compat.border.subMenu.style = Style
# Overview
example.compat.border.title = Border Layout Example
example.compat.border.description = <p>Observe the organization and structure of the page created with the border layout component. The border layout component allows a developer to easily format a page without existing CSS or table knowledge. Simply define content for the different facets on the page and the border layout will create a common looking page. Each facet can be customized or hidden as needed.</p>
# Layout
example.compat.border.layout.title = Border Layout Options
example.compat.border.layout.description = <p>Customize the layout directly via the "layout" attribute.</p>
# Render
example.compat.border.render.title = Border Layout Render
example.compat.border.render.description = <p>Display or hide individual facets of the layout.</p>
# Style
example.compat.border.style.title = Border Layout Style
example.compat.border.style.description = <p>Customize the style of the border facets.</p>

### COMPAT - Calendar
menu.compat.calendar.title = ice:selectInputDate
menu.compat.calendar.subMenu.title = Examples
menu.compat.calendar.subMenu.main = Overview
menu.compat.calendar.subMenu.popup = Popup
menu.compat.calendar.subMenu.pattern = Converter Pattern
menu.compat.calendar.subMenu.timezone = Timezones
menu.compat.calendar.subMenu.highlight = Date Highlighting
# Overview
example.compat.calendar.title = Calendar Example
example.compat.calendar.description = <p>Basic calendar component demonstrating the various attributes available.</p>
# Popup
example.compat.calendar.popup.title = Calendar Popup Example
example.compat.calendar.popup.description = <p>Configure the calendar popup appearance.</p>
# Pattern
example.compat.calendar.pattern.title = Calendar Converter Pattern Example
example.compat.calendar.pattern.description = <p>Demonstration of custom date patterns and how they apply to the calendar.</p>
# Timezone
example.compat.calendar.timezone.title = Calendar Timezones Example
example.compat.calendar.timezone.description = <p>Choose a different timezone to see how it applies to the calendar.</p>
# Highlight
example.compat.calendar.highlight.title = Calendar Date Highlighting Example
example.compat.calendar.highlight.description = <p>Highlight specific days or weeks with the calendar.</p>

### COMPAT - Chart
menu.compat.chart.title = ice:outputChart
menu.compat.chart.subMenu.title = Examples
menu.compat.chart.subMenu.main = Overview
menu.compat.chart.subMenu.area = Area
menu.compat.chart.subMenu.bar = Bar
menu.compat.chart.subMenu.areaStacked = Area Stacked
menu.compat.chart.subMenu.barStacked = Bar Stacked
menu.compat.chart.subMenu.barClustered = Bar Clustered
menu.compat.chart.subMenu.line = Line
menu.compat.chart.subMenu.point = Point
menu.compat.chart.subMenu.pie2d = Pie 2D
menu.compat.chart.subMenu.pie3d = Pie 3D
menu.compat.chart.subMenu.custom = Custom
menu.compat.chart.subMenu.options = Basic Options
menu.compat.chart.subMenu.dynamic = Dynamic
# Chart
example.compat.chart.title = Chart Examples
example.compat.chart.description = <p>Charts come in various forms.</p>
# Area Chart
example.compat.chart.area.title = Area Chart Examples
example.compat.chart.area.description = <p>Area chart</p>
# Area Stacked
example.compat.chart.areaStacked.title = Area Stacked Chart Example
example.compat.chart.areaStacked.description = <p>Chars come in various forms.</p>
# Bar Chart
example.compat.chart.bar.title = Bar Chart Example
example.compat.chart.bar.description = <p>Bar chart.</p>
# Bar Stacked
example.compat.chart.barStacked.title = Bar Stacked Chart Example
example.compat.chart.barStacked.description = <p>Stacked bars chart.</p>
# Bar Clustered
example.compat.chart.barClustered.title = Bar Clustered Chart Example
example.compat.chart.barClustered.description = <p>Stacked bars chart.</p>
# Line
example.compat.chart.line.title = Line Chart Example
example.compat.chart.line.description =<p>Line chart</p>
# Point
example.compat.chart.point.title = Point Chart Example
example.compat.chart.point.description = <p>Point chart</p>
# Pie2d
example.compat.chart.pie2d.title = Pie2d Chart Example
example.compat.chart.pie2d.description = <p>Pie2d chart</p>
# Pie3D
example.compat.chart.pie3d.title = Pie3D Chart Example
example.compat.chart.pie3d.description = <p>Pie3d chart</p>
# Custom
example.compat.chart.custom.title = Custom Chart Example
example.compat.chart.custom.description = <p>Custom chart</p>
# Options
example.compat.chart.options.title = Basic Options
example.compat.chart.options.description = <p>Generic options to customize the chart. Title, height and width, legend placement.</p>
# Dynamic
example.compat.chart.dynamic.title = Dynamic Chart
example.compat.chart.dynamic.description = <p>Dynamically add or remove data from a chart.</p>

### COMPAT - Connection Status
menu.compat.connectionStatus.title = ice:outputConnectionStatus
menu.compat.connectionStatus.subMenu.title = Examples
menu.compat.connectionStatus.subMenu.main = Overview
menu.compat.connectionStatus.subMenu.labels = Labels
menu.compat.connectionStatus.subMenu.style = Style
# Overview
example.compat.connectionStatus.title = Connection Status Example
example.compat.connectionStatus.description = Basic connection status component demonstrating the various attributes available.
# Labels
example.compat.connectionStatus.labels.title = Connection Status Label Example
example.compat.connectionStatus.labels.description = Customize the different labels of the connection status component.
# Style
example.compat.connectionStatus.style.title = Connection Status Style Example
example.compat.connectionStatus.style.description = View the different styles of the connection status component.

### COMPAT - Collapsible
menu.compat.collapsible.title = ice:panelCollapsible
menu.compat.collapsible.subMenu.title = Examples
menu.compat.collapsible.subMenu.main = Overview
menu.compat.collapsible.subMenu.toggle = Toggle on Click
menu.compat.collapsible.subMenu.expanded = Expanded
menu.compat.collapsible.subMenu.event = Event
menu.compat.collapsible.subMenu.immediate = Immediate
menu.compat.collapsible.subMenu.multiple = Multiple
# Overview
example.compat.collapsible.title = Panel Collapsible Example
example.compat.collapsible.description = Basic overview of the collapsible component, which can easily display or hide child content.
# Toggle on Click
example.compat.collapsible.toggle.title = Toggle on Click Example
example.compat.collapsible.toggle.description = View the effect of the toggleOnClick attribute which will allow the entire header to be clicked or not. 
# Expanded
example.compat.collapsible.expanded.title = Expanded Example
example.compat.collapsible.expanded.description = Control the expanded state from the bean.
# Event
example.compat.collapsible.event.title = Event Example
example.compat.collapsible.event.description = Acting on the event fired when the collapsible component is used.
# Multiple
example.compat.collapsible.multiple.title = Multiple Example
example.compat.collapsible.multiple.description = Demonstration of having multiple collapsible components (with different content) on the same page.



### COMPAT - Confirmation Panel
menu.compat.confirmation.title = ice:panelConfirmation
menu.compat.confirmation.subMenu.title = Examples
menu.compat.confirmation.subMenu.main = Overview
menu.compat.confirmation.subMenu.label = Labels
menu.compat.confirmation.subMenu.button = Button Type
menu.compat.confirmation.subMenu.display = Display Options
menu.compat.confirmation.subMenu.mouse = Display at Mouse
# Overview
example.compat.confirmation.title = Panel Confirmation Example
example.compat.confirmation.description = Basic overview of the confirmation panel component, which is used to easily display a dialog.
# Labels
example.compat.confirmation.label.title = Labels Example
example.compat.confirmation.label.description = Customize the button labels and popup text. 
# Button Type
example.compat.confirmation.button.title = Button Type Example
example.compat.confirmation.button.description = Choose the different types of buttons to show on the dialog.
# Display Options
example.compat.confirmation.display.title = Display Options Example
example.compat.confirmation.display.description = Customize how the dialog will be displayed.
# Display at Mouse
example.compat.confirmation.mouse.title = Display at Mouse Example
example.compat.confirmation.mouse.description = Demonstrate the ability to display the dialog right by the mouse pointer.

### COMPAT - Data Table (Generic)
menu.compat.dataTable.title = ice:dataTable
menu.compat.dataTable.subMenu.title = Examples
menu.compat.dataTable.subMenu.main = Overview
menu.compat.dataTable.subMenu.rows = Displayed Rows
menu.compat.dataTable.subMenu.group = Column Grouping
menu.compat.dataTable.subMenu.hide = Column Hiding
menu.compat.dataTable.subMenu.resize = Column Resizing
menu.compat.dataTable.subMenu.widths = Column Widths
menu.compat.dataTable.subMenu.client = Client Only Resizing
menu.compat.dataTable.subMenu.sort = Sorting
menu.compat.dataTable.subMenu.scroll = Scrolling
menu.compat.dataTable.subMenu.dynamic = Dynamic
# Overview
example.compat.dataTable.title = Data Table Example
example.compat.dataTable.description = Basic overview of the data table component.
# Rows
example.compat.dataTable.rows.title = Displayed Rows Example
example.compat.dataTable.rows.description = Customize how many rows to display at once. 
# Grouping
example.compat.dataTable.group.title = Column Grouping Example
example.compat.dataTable.group.description = View how column grouping inside a data table looks.
# Hiding
example.compat.dataTable.hide.title = Column Hiding Example
example.compat.dataTable.hide.description = Hide or display columns inside a data table.
# Resizing
example.compat.dataTable.resize.title = Column Resizing Example
example.compat.dataTable.resize.description = Resizable data table.
# Resizing Widths
example.compat.dataTable.widths.title = Column Resizing Widths Example
example.compat.dataTable.widths.description = Customize the widths of the resizable columns.
# Client Only Resizing
example.compat.dataTable.client.title = Client Only Resizing Example
example.compat.dataTable.client.description = Toggle column resizing to be stored only on the client.
# Sorting
example.compat.dataTable.sort.title = Data Table Sorting Example
example.compat.dataTable.sort.description = Sorting a data table.
# Scrolling
example.compat.dataTable.scroll.title = Scrollable Data Table Example
example.compat.dataTable.scroll.description = Scrollable data table.
# Dynamic
example.compat.dataTable.dynamic.title = Dynamic Data Table Example
example.compat.dataTable.dynamic.description = Modify the data table by adding, removing, or updating records.



### COMPAT - Data Table (Paginator)
menu.compat.paginator.title = ice:dataPaginator
menu.compat.paginator.subMenu.title = Examples
menu.compat.paginator.subMenu.main = Overview
menu.compat.paginator.subMenu.info = Info Paginator
menu.compat.paginator.subMenu.events = Events
menu.compat.paginator.subMenu.max = Max Pages
menu.compat.paginator.subMenu.fast = Fast Step
menu.compat.paginator.subMenu.display = Always Display
menu.compat.paginator.subMenu.vertical = Vertical
# Overview
example.compat.paginator.title = Data Table Paginator
example.compat.paginator.description = Basic overview of the data table paginator component.
# Info
example.compat.paginator.info.title = Information Paginator
example.compat.paginator.info.description = View an information based paginator, which displays text information about the associated data table.
# Events
example.compat.paginator.events.title = Paginator Events
example.compat.paginator.events.description = View the row paginator events that can be fired and listened to.
# Max Pages
example.compat.paginator.max.title = Max Paginator Pages
example.compat.paginator.max.description = Customize how many pages to display at once in the paginator
# Fast Step
example.compat.paginator.fast.title = Fast Step Paginator
example.compat.paginator.fast.description = Customize how many pages to move using fast step.
# Always Display
example.compat.paginator.display.title = Always Display Paginator
example.compat.paginator.display.description = Display the paginator only when needed.
# Vertical
example.compat.paginator.vertical.title = Vertical Paginator
example.compat.paginator.vertical.description = Render the data paginator vertically instead of horizontally.

### COMPAT - Data Table (Row Selector)
menu.compat.selector.title = ice:rowSelector
menu.compat.selector.subMenu.title = Examples
menu.compat.selector.subMenu.main = Overview
menu.compat.selector.subMenu.type = Type
menu.compat.selector.subMenu.events = Events
menu.compat.selector.subMenu.toggle = Toggle on Input
menu.compat.selector.subMenu.pre = Pre-Style
# Overview
example.compat.selector.title = Data Table Row Selector
example.compat.selector.description = Basic overview of the data table selector component.
# Type
example.compat.selector.type.title = Row Selector Type
example.compat.selector.type.description = Customize the type of row selector.
# Events
example.compat.selector.events.title = Row Selector Events
example.compat.selector.events.description = View the row selector events that can be fired and listened to.
# Toggle on Input
example.compat.selector.toggle.title = Row Selector Toggle on Input
example.compat.selector.toggle.description = Choose whether the selection should toggle when a button or input field in the row is interacted with.
# Pre-Style on Selection
example.compat.selector.pre.title = Row Selector Pre-Style
example.compat.selector.pre.description = Pre-style the CSS for the row selection immediately on the client instead of waiting for the server.

### COMPAT - Divider
menu.compat.divider.title = ice:panelDivider
menu.compat.divider.subMenu.title = Examples
menu.compat.divider.subMenu.main = Overview
menu.compat.divider.subMenu.orientation = Orientation
menu.compat.divider.subMenu.position = Position
menu.compat.divider.subMenu.content = Dynamic Content
menu.compat.divider.subMenu.embedded = Embedded
# Overview
example.compat.divider.title = Panel Divider Example
example.compat.divider.description = Basic divider demonstrating the component.
# Orientation
example.compat.divider.orientation.title = Panel Divider Orientation
example.compat.divider.orientation.description = View the horizontal or vertical orientation the divider supports.
# Position
example.compat.divider.position.title = Panel Divider Position
example.compat.divider.position.description = Customize the position of the divider bar from the bean.
# Content
example.compat.divider.content.title = Panel Divider Dynamic Content
example.compat.divider.content.description = Dynamically set the content of each pane in the divider component.
# Embedded
example.compat.divider.embedded.title = Panel Divider Embedded
example.compat.divider.embedded.description = Embed one divider component in the pane of another.

### COMPAT - Drag and Drop
menu.compat.dragdrop.title = ice:panelGroup (drag&drop)
menu.compat.dragdrop.subMenu.title = Examples
menu.compat.dragdrop.subMenu.main = Overview
menu.compat.dragdrop.subMenu.events = Events
menu.compat.dragdrop.subMenu.effect = Effect
# Overview
example.compat.dragdrop.title = Drag & Drop Example
example.compat.dragdrop.description = Basic example of drag and drop
# Events
example.compat.dragdrop.events.title = Drag & Drop Events
example.compat.dragdrop.events.description = View and mask events that drag and drop fires.
# Effect
example.compat.dragdrop.effect.title = Drag & Drop Effect
example.compat.dragdrop.effect.description = Optional effect when the drag and drop is complete.

### COMPAT - Effect
menu.compat.effect.title = ice:panelGroup (Effects)
menu.compat.effect.subMenu.title = Examples
menu.compat.effect.subMenu.main = Overview
# Overview
example.compat.effect.title = Effect Example
example.compat.effect.description = View every available effect.

### COMPAT - Map
menu.compat.map.title = ice:gMap
menu.compat.map.subMenu.title = Examples
menu.compat.map.subMenu.main = Overview
menu.compat.map.subMenu.address = Address
menu.compat.map.subMenu.controls = Controls
menu.compat.map.subMenu.latlong = Latitude/Longitude
menu.compat.map.subMenu.load = Load XML
menu.compat.map.subMenu.type = Render Type
menu.compat.map.subMenu.zoom = Zoom Level
# Overview
example.compat.map.title = Google Map Example
example.compat.map.description = Basic overview of the Google Map component, with simple address lookup and various available controls.
# Address
example.compat.map.address.title = Google Map Address
example.compat.map.address.description = Lookup a single address or get directions between two locations (including optional text directions).
# Controls
example.compat.map.controls.title = Google Map Controls
example.compat.map.controls.description = Show the different map controls available with the component.
# Latitude/Longitude
example.compat.map.latlong.title = Google Map Latitude/Longitude
example.compat.map.latlong.description = Locate preset locations with latitude and longitude coordinates.
# Load XML
example.compat.map.load.title = Google Map Load KML
example.compat.map.load.description = Load a series of map locations from KML, such as a community provided list of restaurants.
# Type
example.compat.map.type.title = Google Map Type
example.compat.map.type.description = Set the rendering type the map will use, such as Satellite.
# Zoom
example.compat.map.zoom.title = Google Map Zoom Level
example.compat.map.zoom.description = Dynamically set the zoom level from the bean level.

### COMPAT - Media
menu.compat.media.title = ice:outputMedia
menu.compat.media.subMenu.title = Examples
menu.compat.media.subMenu.main = Overview
menu.compat.media.subMenu.flash = Flash
menu.compat.media.subMenu.quicktime = Quicktime
menu.compat.media.subMenu.windows = Windows WMV
menu.compat.media.subMenu.real = Real Player
# Overview
example.compat.media.title = Media Example
example.compat.media.description = Basic overview of the media component
# Flash
example.compat.media.flash.title = Media Flash Example
example.compat.media.flash.description = Render media in the Flash format.
# Quicktime
example.compat.media.quicktime.title = Media Quicktime Example
example.compat.media.quicktime.description = Render media in the Quicktime format.
# Windows WMV
example.compat.media.windows.title = Media Windows WMV Example
example.compat.media.windows.description = Render media in the Windows WMV format.
# Real Player
example.compat.media.real.title = Media Real Player Example
example.compat.media.real.description = Render media in the Real Player format.

### COMPAT - Menu Bar
menu.compat.menuBar.title = ice:menuBar
menu.compat.menuBar.subMenu.title = Examples
menu.compat.menuBar.subMenu.main = Overview
menu.compat.menuBar.subMenu.events = Events
menu.compat.menuBar.subMenu.orientation = Orientation
menu.compat.menuBar.subMenu.click = Display on Click
menu.compat.menuBar.subMenu.keyboard = Keyboard Navigation
menu.compat.menuBar.subMenu.icons = Icons
menu.compat.menuBar.subMenu.separator = Separator
menu.compat.menuBar.subMenu.dynamic = Dynamic
# Overview
example.compat.menuBar.title = Menu Bar Example
example.compat.menuBar.description = Basic example of the menu bar component which is used to easily display and customize Javascript menus.
# Events
example.compat.menuBar.events.title = Menu Bar Events
example.compat.menuBar.events.description = Fire events when different menu items are clicked on.
# Orientation
example.compat.menuBar.orientation.title = Menu Bar Orientation
example.compat.menuBar.orientation.description = View the different orientations available with the menu bar component.
# Display on Click
example.compat.menuBar.click.title = Menu Bar Display on Click
example.compat.menuBar.click.description = Determine whether hovering will open the menu or if clicking is necessary.
# Keyboard Navigation
example.compat.menuBar.keyboard.title = Menu Bar Keyboard Navigation
example.compat.menuBar.keyboard.description = Enable or disable keyboard navigation for the menu bar.
# Icons
example.compat.menuBar.icons.title = Menu Bar Icons
example.compat.menuBar.icons.description = Display or hide the image icons associated with some menu items.
# Separator
example.compat.menuBar.separator.title = Menu Bar Separator
example.compat.menuBar.separator.description = View the menu item separator component in the context of a menu bar.
# Dynamic
example.compat.menuBar.dynamic.title = Menu Bar Dynamic
example.compat.menuBar.dynamic.description = Dynamically generate a list of menu items.

### COMPAT - Menu Popup
menu.compat.menuPopup.title = ice:menuPopup
menu.compat.menuPopup.subMenu.title = Examples
menu.compat.menuPopup.subMenu.main = Overview
menu.compat.menuPopup.subMenu.events = Events
menu.compat.menuPopup.subMenu.orientation = Orientation
menu.compat.menuPopup.subMenu.hide = Hide On
menu.compat.menuPopup.subMenu.keyboard = Keyboard Navigation
menu.compat.menuPopup.subMenu.icons = Icons
menu.compat.menuPopup.subMenu.separator = Separator
menu.compat.menuPopup.subMenu.dynamic = Dynamic
# Overview
example.compat.menuPopup.title = Menu Popup Example
example.compat.menuPopup.description = Basic example of the menu popup which can be displayed on right-click of an element.
# Events
example.compat.menuPopup.events.title = Menu Popup Events
example.compat.menuPopup.events.description = Fire events when different menu items are clicked on.
# Hide On
example.compat.menuPopup.hide.title = Menu Popup Hide On
example.compat.menuPopup.hide.description = Determine how to close the menu popup.
# Keyboard Navigation
example.compat.menuPopup.keyboard.title = Menu Popup Keyboard Navigation
example.compat.menuPopup.keyboard.description = Enable or disable keyboard navigation for the menu popup.
# Icons
example.compat.menuPopup.icons.title = Menu Popup Icons
example.compat.menuPopup.icons.description = Display or hide the image icons associated with some menu items.
# Separator
example.compat.menuPopup.separator.title = Menu Popup Separator
example.compat.menuPopup.separator.description = View the menu item separator component in the context of a menu popup.
# Dynamic
example.compat.menuPopup.dynamic.title = Menu Popup Dynamic
example.compat.menuPopup.dynamic.description = Dynamically generate a list of menu items.

### COMPAT - Output Resource
menu.compat.outputResource.title = ice:outputResource
menu.compat.outputResource.subMenu.title = Examples
menu.compat.outputResource.subMenu.main = Overview
menu.compat.outputResource.subMenu.type = Type
menu.compat.outputResource.subMenu.attachment = Attachment
menu.compat.outputResource.subMenu.filename = Filename
menu.compat.outputResource.subMenu.label = Label
# Overview
example.compat.outputResource.title = Output Resource Example
example.compat.outputResource.description = Basic overview of the output resource component which is used to easily stream downloadable content to users.
# Type
example.compat.outputResource.type.title = Type Example
example.compat.outputResource.type.description = View the different types of rendering available with the output resource component. 
# Attachment
example.compat.outputResource.attachment.title = Attachment Example
example.compat.outputResource.attachment.description = Choose whether the resource should download as an attachment or attempt to display in the browser.
# Filename
example.compat.outputResource.filename.title = Filename Example
example.compat.outputResource.filename.description = Customize the filename of the resource that is to be downloaded.
# Label
example.compat.outputResource.label.title = Label Example
example.compat.outputResource.label.description = Modify the labels of the button or link that allows the resource to be downloaded.

### COMPAT - Popup
menu.compat.popup.title = ice:panelPopup
menu.compat.popup.subMenu.title = Examples
menu.compat.popup.subMenu.main = Overview
menu.compat.popup.subMenu.modal = Modal
menu.compat.popup.subMenu.draggable = Draggable
menu.compat.popup.subMenu.center = Auto Center
menu.compat.popup.subMenu.position = Auto Position
menu.compat.popup.subMenu.client = Client Only
# Overview
example.compat.popup.title = Popup Example
example.compat.popup.description = Basic example demonstrating a modal, auto centered popup.
# Modal
example.compat.popup.modal.title = Modal Popup
example.compat.popup.modal.description = Display a modal popup which prevents interacting with the page until the popup is dismissed.
# Draggable
example.compat.popup.draggable.title = Draggable Popup
example.compat.popup.draggable.description = Display a draggable popup that can be moved around the page.
# Auto Center
example.compat.popup.center.title = Auto Center Popup
example.compat.popup.center.description = Automatically center the popup when it is displayed and also when the browser is scrolled.
# Auto Position
example.compat.popup.position.title = Auto Position Popup
example.compat.popup.position.description = Automatically position the popup at a set X,Y coordinate and maintain that position through browser scrolling.
# Client Only
example.compat.popup.client.title = Client Only Popup
example.compat.popup.client.description = Prevent the draggable popup from sending an event to the server when it is dropped.

### COMPAT - Positioned Panel
menu.compat.positioned.title = ice:panelPositioned
menu.compat.positioned.subMenu.title = Examples
menu.compat.positioned.subMenu.main = Overview
menu.compat.positioned.subMenu.constraint = Constraint
menu.compat.positioned.subMenu.listener = Listener
menu.compat.positioned.subMenu.dynamic = Dynamic
menu.compat.positioned.subMenu.sort = Sorting
menu.compat.positioned.subMenu.style = Style
# Overview
example.compat.positioned.title = Positioned Panel Example
example.compat.positioned.description = An iterator component that allows re-ordering of the list.
# Constraint
example.compat.positioned.constraint.title = Positioned Panel Constraint
example.compat.positioned.constraint.description = Constrain how the re-ordering is displayed and handled.
# Listener
example.compat.positioned.listener.title = Positioned Panel Listener
example.compat.positioned.listener.description = Listen to an event that fires when an item is re-ordered.
# Dynamic
example.compat.positioned.dynamic.title = Positioned Panel Dynamic
example.compat.positioned.dynamic.description = Dynamically add or remove items from the positioned list.
# Sort
example.compat.positioned.sort.title = Positioned Panel Sorting
example.compat.positioned.sort.description = Automatically sort the positioned list items.
# Style
example.compat.positioned.style.title = Positioned Panel Style
example.compat.positioned.style.description = Customize the style of each panel element using varStatus.

### COMPAT - Progress Bar
menu.compat.progress.title = ice:outputProgress
menu.compat.progress.subMenu.title = Examples
menu.compat.progress.subMenu.main = Overview
menu.compat.progress.subMenu.indeterminate = Indeterminate
menu.compat.progress.subMenu.label = Custom Label
menu.compat.progress.subMenu.multiple = Multiple Instances
menu.compat.progress.subMenu.style = Style
# Overview
example.compat.progress.title = Progress Bar Example
example.compat.progress.description = Basic example demonstrating the progress bar component.
# Indeterminate
example.compat.progress.indeterminate.title = Indeterminate Progress Bar
example.compat.progress.indeterminate.description = Display a progress bar without a specified percent, which is ideal for an unknown long runnning task.
# Custom Label
example.compat.progress.label.title = Custom Progress Bar Label
example.compat.progress.label.description = Customize the position and text of the progress bar label.
# Multiple Instances
example.compat.progress.multiple.title = Multiple Progress Bar Instances
example.compat.progress.multiple.description = Multiple progress bars all running at once. 
# Style
example.compat.progress.style.title = Progress Bar Style
example.compat.progress.style.description = Customize the progress bar style.

### COMPAT - Rich Text
menu.compat.richtext.title = ice:inputRichText
menu.compat.richtext.subMenu.title = Examples
menu.compat.richtext.subMenu.main = Overview
menu.compat.richtext.subMenu.save = Save on Submit
menu.compat.richtext.subMenu.language = Language
menu.compat.richtext.subMenu.skin = Skins
menu.compat.richtext.subMenu.toolbar = Toolbar
menu.compat.richtext.subMenu.disable = Disable
# Overview
example.compat.richtext.title = Rich Text Example
example.compat.richtext.description = Basic example demonstrating the Rich Text component with default values.
# Save on Submit
example.compat.richtext.save.title = Rich Text Save on Submit
example.compat.richtext.save.description = Choose whether the Rich Text component should save anytime a submit is done, or only when the Save button is explicilty clicked by the user.
# Language
example.compat.richtext.language.title = Rich Text Language
example.compat.richtext.language.description = Choose from 54 available languages for the Rich Text component.
# Skin
example.compat.richtext.skin.title = Rich Text Skins
example.compat.richtext.skin.description = Choose from 3 different skin themes for the Rich Text component.
# Toolbar
example.compat.richtext.toolbar.title = Rich Text Toolbar
example.compat.richtext.toolbar.description = View the basic or feature rich toolbars for the Rich Text component.
# Disable
example.compat.richtext.disable.title = Rich Text Disabled State
example.compat.richtext.disable.description = View how the disabled state of the Rich Text component appears and functions.

### COMPAT - Tab Pane
menu.compat.tab.title = ice:panelTabSet
menu.compat.tab.subMenu.title = Examples
menu.compat.tab.subMenu.main = Overview
menu.compat.tab.subMenu.placement = Placement
menu.compat.tab.subMenu.icon = Icons
menu.compat.tab.subMenu.label = Labels
menu.compat.tab.subMenu.wrapping = Text Wrapping
menu.compat.tab.subMenu.visibility = Visibility
menu.compat.tab.subMenu.control = Backend Control
menu.compat.tab.subMenu.events = Events
menu.compat.tab.subMenu.dynamic = Dynamic
# Overview
example.compat.tab.title = Tab Example
example.compat.tab.description = Overview of the tab set component.
# Position
example.compat.tab.placement.title = Tab Placement
example.compat.tab.placement.description = Customize where the tabs will display on the container.
# Icons
example.compat.tab.icon.title = Tab Icons
example.compat.tab.icon.description = Add icons to the tab component.
# Labels
example.compat.tab.label.title = Tab Labels
example.compat.tab.label.description = Customize the tab labels and method of rendering.
# Text Wrapping
example.compat.tab.wrapping.title = Tab Text Wrapping
example.compat.tab.wrapping.description = View the effect of label text wrapping.
# Visibility
example.compat.tab.visibility.title = Tab Visibility
example.compat.tab.visibility.description = Hide or display each individual tab.
# Backend Control
example.compat.tab.control.title = Tab Backend Control
example.compat.tab.control.description = Control the selected tab from the backing bean.
# Events
example.compat.tab.events.title = Tab Events
example.compat.tab.events.description = Listener that fires when the tab is changed.
# Dynamic
example.compat.tab.dynamic.title = Dynamic Tabs
example.compat.tab.dynamic.description = Dynamically add and remove tabs.

### COMPAT - Tree
menu.compat.tree.title = ice:tree
menu.compat.tree.subMenu.title = Examples
menu.compat.tree.subMenu.main = Overview
menu.compat.tree.subMenu.events = Events
menu.compat.tree.subMenu.icons = Custom Icons
menu.compat.tree.subMenu.navigation = Hide Navigation
menu.compat.tree.subMenu.root = Hide Root Node
menu.compat.tree.subMenu.dynamic = Dynamic
# Overview
example.compat.tree.title = Tree Example
example.compat.tree.description = Overview of the tree component.
# Events
example.compat.tree.events.title = Tree Events
example.compat.tree.events.description = Demonstration of the different events the tree can fire.
# Custom Icons
example.compat.tree.icons.title = Tree Custom Icons
example.compat.tree.icons.description = Custom image icons for the tree nodes and leafs.
# Hide Navigation
example.compat.tree.navigation.title = Tree Hide Navigation
example.compat.tree.navigation.description = Allow the navigation links to be hidden.
# Hide Root Node
example.compat.tree.root.title = Tree Hide Root Note
example.compat.tree.root.description = Toggle the visibility of the root node.
# Dynamic
example.compat.tree.dynamic.title = Dynamic Tree
example.compat.tree.dynamic.description = Add and remove nodes from the tree component.

### COMPAT - Tooltip
menu.compat.tooltip.title = ice:panelTooltip
menu.compat.tooltip.subMenu.title = Examples
menu.compat.tooltip.subMenu.main = Overview
menu.compat.tooltip.subMenu.display = Display Type
menu.compat.tooltip.subMenu.hide = Hide Type
menu.compat.tooltip.subMenu.draggable = Draggable
menu.compat.tooltip.subMenu.delay = Hover Delay
menu.compat.tooltip.subMenu.move = Move with Mouse
menu.compat.tooltip.subMenu.preview = Website Previews
# Overview
example.compat.tooltip.title = Tooltip Example
example.compat.tooltip.description = Overview of the rich tooltip component.
# Display On
example.compat.tooltip.display.title = Tooltip Display On
example.compat.tooltip.display.description = Simple example demonstrating the different ways the tooltip can be displayed.
# Hide On
example.compat.tooltip.hide.title = Tooltip Hide On
example.compat.tooltip.hide.description = Simple example demonstrating the different ways the tooltip can be hidden.
# Draggable
example.compat.tooltip.draggable.title = Tooltip Draggable
example.compat.tooltip.draggable.description = Allow the tooltip to be dragged or not.
# Hover Delay
example.compat.tooltip.delay.title = Tooltip Hover Delay
example.compat.tooltip.delay.description = Customize the delay before displaying the tooltip on hover.
# Move with Mouse
example.compat.tooltip.move.title = Tooltip Move with Mouse
example.compat.tooltip.move.description = Toggle the tooltip moving with the mouse or not.
# Website Previews
example.compat.tooltip.preview.title = Tooltip Website Previews
example.compat.tooltip.preview.description = Example of hover previews on links.

### COMPAT - Series Panel
menu.compat.series.title = ice:panelSeries
menu.compat.series.subMenu.title = Examples
menu.compat.series.subMenu.main = Overview
menu.compat.series.subMenu.dynamic = Dynamic
menu.compat.series.subMenu.rows = Rows
menu.compat.series.subMenu.first = Start From
menu.compat.series.subMenu.content = Custom Content
menu.compat.series.subMenu.style = Style
# Overview
example.compat.series.title = Series Panel Example
example.compat.series.description = Overview of the panel series iterator component.
# Dynamic
example.compat.series.dynamic.title = Series Panel Dynamic
example.compat.series.dynamic.description = Add or remove items from the panel series component.
# Rows
example.compat.series.rows.title = Series Panel Rows
example.compat.series.rows.description = Set the number of rows to display at once with the panel series component.
# Start From
example.compat.series.first.title = Series Panel Start From
example.compat.series.first.description = Set what index to start the panel series rendering from with the first attribute.
# Custom Content
example.compat.series.content.title = Series Panel Custom Conent
example.compat.series.content.description = Customize the content to be used in the panel series component.
# Style
example.compat.series.style.title = Series Panel Style
example.compat.series.style.description = Style the panel series children via the varStatus attribute.

### COMPAT - Set Event Phase
menu.compat.eventphase.title = ice:setEventPhase
menu.compat.eventphase.subMenu.title = Examples
menu.compat.eventphase.subMenu.main = Overview
menu.compat.eventphase.subMenu.change = Value Change Event
menu.compat.eventphase.subMenu.action = Action Event
# Overview
example.compat.eventphase.title = Set Event Phase Example
example.compat.eventphase.description = Basic example demonstrating the functionality of the setEventPhase.
# Value Change Event
example.compat.eventphase.change.title = Value Change Event Phase Example
example.compat.eventphase.change.description = This example demonstrates firing a valueChangeListener in a later phase through the setEventPhase. This allows us to modify a bean value without the value being overwritten in a later phase, as normally happens in the early firing valueChangeListeners.
# Action Event
example.compat.eventphase.action.title = Action Event Phase Example
example.compat.eventphase.action.description = This example demonstrates using setEventPhase to force an actionListener to fire earlier in the lifecycle, before validation occurs. This creates an effect similar to the immediate="true" attribute.

### COMPAT - Stacking Panel
menu.compat.stacking.title = ice:panelStack
menu.compat.stacking.subMenu.title = Examples
menu.compat.stacking.subMenu.main = Overview
# Overview
example.compat.stacking.title = Stacking Panel Example
example.compat.stacking.description = Basic example demonstrating the functionality of the panelStack.


### EE - Filler Properties
### EE - Table
menu.ee.table.title = Table Components
### EE - Layout
menu.ee.layout.title = Layout Components
### EE - Selection
menu.ee.selection.title = Selection Components
### EE - Tree
menu.ee.tree.title = Tree Components
### EE - Process
menu.ee.process.title = Process Components
### EE - Status Bar
menu.ee.statusbar.title = Status Bar
### EE - Slideshow
menu.ee.slideshow.title = Slide Show
### EE - Schedule
menu.ee.schedule.title = Schedule
