#
# Version: MPL 1.1
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations under
# the License.
#
# The Original Code is ICEfaces 1.5 open source software code, released
# November 5, 2006. The Initial Developer of the Original Code is ICEsoft
# Technologies Canada, Corp. Portions created by ICEsoft are Copyright (C)
# 2004-2011 ICEsoft Technologies Canada, Corp. All Rights Reserved.
#
# Contributor(s): _____________________.
#

showcase.title = ICEfaces Showcase
menu.ace.title = ACE Components
menu.compat.title = ICE Components
menu.ee.title = EE Components

menu.ace.tooltip = ACE Components suite showcase
menu.compat.tooltip = ICE Components suite showcase
################################################################################
# ICEfaces Advanced Components (ACE)                                           #
################################################################################
### ACE - Suite Overview
menu.ace.aceSuiteOverview.title = Suite Overview
menu.ace.aceSuiteOverview.subMenu.title = Examples
menu.ace.aceSuiteOverview.subMenu.main = Overview
# Overview
example.ace.aceSuiteOverview.title = Suite Overview
example.ace.aceSuiteOverview.description = <h2>What are the ACE Components?</h2><p>The Advanced Component Environment (ACE) component library is and open-source, JSF-based component suite for Rich Internet Application (RIA) development.  It features over 40+ new components including a new industry-leading data table. The ACE Components utilize a blend of server-side and client-based rendering techniques, and are fully optimized to leverage the advanced new capabilities of JSF 2.</p><p>The ACE library includes custom components developed by ICEsoft as well as \u201cbest-of-breed\u201d components sourced from popular third party open source libraries such as jQuery, YUI and PrimeFaces that have been modified to work with the ICEfaces Framework and across ICEsoft\u2019s supported platform matrix.</p><h2>How are the ACE Components licensed?</h2><p>The ACE Component Library is made available under the Apache 2 Open Source License. All code modifications and component enhancements are free for developers to use, distribute and modify.</p><h2>Where can I access technical information regarding the components?</h2><p>Source code samples of each demo are located at the bottom of each demo page being viewed. Links to TLD and technical documentation / tutorials are located on the header bar of each demo.</p><h2>Can ACE Components be mixed and matched with other components?</h2><p>ACE components are fully interoperable at a page and project level with both the ICE Components and the ICEfaces EE Components. JSF 2 facilitates interoperability between third party component libraries. While third party component libraries may successfully integrate with the ACE Components, ICEfaces is not tested for compatibility with third party libraries, so such integrations are not formally supported.</p><h2>When should I use ACE vs. ICE Components?</h2><p>The ICE Components have been re-engineered to ensure ICEfaces 1.X compatibility with ICEfaces 2, providing easy migration of ICEfaces 1.x applications to ICEfaces 2.</p><p>In contrast to the ACE Components, the ICE Components predominantly leverage server-side rendering techniques providing superior performance on older web browsers with less efficient JavaScript engines.</p><p>Use ICE Components under the following circumstances:</p><ul><li><b>&raquo;</b> Migrate existing ICEfaces 1.X to ICEfaces 2.X.  The ICE components have been re-engineered in ICEfaces 2.X to be tag compatible with previous 1.X releases.  This greatly simplifies the migration from 1.X applications to ICEfaces 2.X.</li><li><b>&raquo;</b> Support older browser versions such as Internet Explorer 6/7.  Older browsers typically have significantly less efficient JavaScript processing engines.  The ICE Components predominantly exercise server-side processing therefore yielding better performance on earlier browsers. </li><li><b>&raquo;</b> Maximize server-side processing.  For security reasons, developers may wish to minimize client-side processing. If this is the case, ICE Components may be better suited.</li></ul><p>Use ACE Components library under the following conditions:</p><ul><li><b>&raquo;</b> 	Use richer JSF 2-based components.  Future development of ICEfaces components will focus on ACE rather than ICE.  The ACE Components will continue to evolve rapidly, continuously introducing new features and capabilities.</li><li><b>&raquo;</b> 	Faster client-side component rendering. More recent browsers have highly optimized JavaScript processing capabilities.  The ACE Components generally implement more client-side JavaScript, relying on the client browser to do more of the rendering. ACE Components will yield faster rendering times over ICE components, especially on more recent browsers.</li></ul><h2>Can ACE Components be backported to earlier ICEfaces releases?</h2><p>In short, no. ACE components rely on the Advanced Component Environment which is itself closely aligned with ICEfaces 2.1 level core framework features that do not exist in the ICEfaces framework prior to the 2.1 release.</p>

### ACE - Accordion Panel
menu.ace.accordionpanel.title = ace:accordion
menu.ace.accordionpanel.subMenu.title = Examples
menu.ace.accordionpanel.subMenu.main = Overview
menu.ace.accordionpanel.subMenu.dynamic = Pane Change
menu.ace.accordionpanel.subMenu.effect = Toggle Effect
# Overview
example.ace.accordionpanel.title = Overview
example.ace.accordionpanel.description = <p>Accordion Panel is a container component with collapsible / expandable panes stacked vertically. Once placed on a page it can have any number of panes each having its own content.</p>
# Dynamic
example.ace.accordionpanel.dynamic.title = Pane Change Listener Example
example.ace.accordionpanel.dynamic.description = <p>The paneChangeListener can be used in scenarios where server side logic needs to be executed when a user switches between panes. A convenient onPaneChangeUpdate can be bundled with paneChangeListener to partially update the page once AJAX call has been completed.</p> <p>To view the demo simply click on any of the tab\u2019s below. Note that the selection is identified to the application logic on the server which for the purposes of this demo simply mirrors back the pane selection via the text field below the panes.</p>
# Effect
example.ace.accordionpanel.effect.title = Pane Change Effect Example
example.ace.accordionpanel.effect.description = <p>Animation effects can be added to the accordion panel which will be activated on tab expansion and close. Click on the tabs below to view the animation results.</p>

### ACE - Animation Panel
menu.ace.animation.title = ace:animation
menu.ace.animation.subMenu.title = Examples
menu.ace.animation.subMenu.main = Overview
# Overview
example.ace.animation.title = Overview
example.ace.animation.description = <p>ICEFaces provides an animation system using attachable behavior, which allows developers to add various animation(s) to many of the ACE components.  Click on the panels below in order to view the associated animation effect.</p>


### ACE - CheckBoxButton
menu.ace.checkboxButton.title = ace:checkboxButton
menu.ace.checkboxButton.subMenu.title = Examples
menu.ace.checkboxButton.subMenu.main = Overview
# Overview
example.ace.checkboxButton.title = Overview
example.ace.checkboxButton.description = <p>The checkboxButton component is a simple, styled UI button control for toggling boolean input values (ie. Select / De-Select).  Click on the box below to toggle button select / deselect functionality.  In this particular demo, server based application code reflects button state back to the user through the text located below the button.</p>

### ACE - Confirm Dialog
menu.ace.confirmationdialog.title = ace:confirmationDialog
menu.ace.confirmationdialog.subMenu.title = Examples
menu.ace.confirmationdialog.subMenu.main = Overview
menu.ace.confirmationdialog.subMenu.modal = Modal
menu.ace.confirmationdialog.subMenu.effect = Effect
# Overview
example.ace.confirmationdialog.title = Overview
example.ace.confirmationdialog.description = <p>The ConfirmationDialog component generates a popup dialog window with confirmation input. Client side APIs, <b>show()</b> and <b>hide()</b> functions, can be used to display and close the dialog. These functions can be called from other components, included in commandButton, commandLink, menuitem etc.</p><p>A number of attributes are available to the developer to allow them to change message, actions, dimensions etc.  Details are available in the technical documentation.</p><p>To demonstrate the component enter custom text in the Header and Message windows below and click on the Display dialog button.</p>
# Modal
example.ace.confirmationdialog.modal.title = Modal Confirmation Example
example.ace.confirmationdialog.modal.description = <p>If <b>modal</b> attribute set to true, other items on the page will be disabled (i.e. cannot be interacted with). Modality creates an overlay below the dialog but above other page elements. Click on the Display dialog button below and notice other page buttons are disabled until the dialog is responded to.</p>
# Effect
example.ace.confirmationdialog.effect.title = Confirmation Dialog Display Effects Example
example.ace.confirmationdialog.effect.description = <p>The  confirmationDialog component supports a number of different effects to draw attention to the popup, as seen in the demo below.  . Select the desired effect for the show and hide events from the pull down menus below and click the display dialog button.  Close the dialog window to view the animation on close.  Possible options are: <i>blind bounce, clip, drop, explode, fade, fold, highlight, puff, pulsate, scale, shake, size, slide, transfer.</i></p>

### ACE - Context Menu
menu.ace.contextMenu.title = ace:contextMenu
menu.ace.contextMenu.subMenu.title = Examples
menu.ace.contextMenu.subMenu.main = Overview
menu.ace.contextMenu.subMenu.global = Global
menu.ace.contextMenu.subMenu.component = Per Component
menu.ace.contextMenu.subMenu.table = Table Integration
menu.ace.contextMenu.subMenu.effect = Effect
# Overview
example.ace.contextMenu.title = Overview
example.ace.contextMenu.description = <p>The ACE Context Menu component provide a robust popup menu system when a designated page region is right clicked. The example below demonstrate usage of the context menu on an application wide basis (global).</p>
# Component
example.ace.contextMenu.component.title = Per Component Context Menu Example
example.ace.contextMenu.component.description = <p>The ace:contextMenu component can also be used to display different menu options depending on the page region or component the mouse is on when being right clicked.  To demonstrate right click on the first sentence in the demo below and then again when the mouse is over the Submit Button.  Notice that a different popup menu is provided depending on the context or position of the mouse at the time of right click.</p>
# In Table
example.ace.contextMenu.table.title = Table Integration Example
example.ace.contextMenu.table.description = <p>The context menu table component also provides context menu functionality within a data table. Right-click on the data table below to optionally add or undo addition of the items in the list.</p>
# Effect
example.ace.contextMenu.effect.title = Display Effects Example
example.ace.contextMenu.effect.description = <p>Transition effects can also be applied to context menu. Select the desired transition effect and right-click on the image to display a context menu using the specified effect.</p>

### ACE - Data Exporter
menu.ace.dataExporter.title = ace:dataExporter
menu.ace.dataExporter.subMenu.title = Examples
menu.ace.dataExporter.subMenu.main = Overview
menu.ace.dataExporter.subMenu.columns = Specify Columns
# Overview
example.ace.dataExporter.title = Overview
example.ace.dataExporter.description = <p>The dataExporter component is used to export data table content into CSV, XLS, PDF and XML formats.  Select the desired export format and click the Export File button below.  The table will be exported into your computers default download location in the target format.</p>
# Columns
example.ace.dataExporter.columns.title = Specify Columns Example
example.ace.dataExporter.columns.description = <p>The dataExporter functionality can be select and export only specified data columns.  Select the targeted data columns from the option list below and click Export File.  View the file from your default download location and confirm that only the select rows were exported.</p>

### ACE - Data Table
menu.ace.dataTable.title = ace:dataTable
menu.ace.dataTable.subMenu.title = Examples
menu.ace.dataTable.subMenu.main = Overview
menu.ace.dataTable.subMenu.filtering = Filtering
menu.ace.dataTable.subMenu.sorting = Sorting
menu.ace.dataTable.subMenu.paginator = Paginator
menu.ace.dataTable.subMenu.scrolling = Scrolling
menu.ace.dataTable.subMenu.lazyLoading = Lazy Loading
menu.ace.dataTable.subMenu.selector = Row Selector
menu.ace.dataTable.subMenu.listener = Row Listener
menu.ace.dataTable.subMenu.rowexpansion = Row Expansion
menu.ace.dataTable.subMenu.panelexpansion = Panel Expansion
menu.ace.dataTable.subMenu.configpanel = Table Config
menu.ace.dataTable.subMenu.rowstate = Row State
menu.ace.dataTable.subMenu.stackable = Column Stacking
menu.ace.dataTable.subMenu.columnReordering = Column Reorder
menu.ace.dataTable.subMenu.rowEditing = Row Editing
# Overview
example.ace.dataTable.title = Overview
example.ace.dataTable.description = <p>The <b>&lt;ace:dataTable&gt;</b> is a rich data table component and arguably one of the most comprehensive and versatile components available in the industry. A large set of features is supported by this tag including sorting, scrolling, pagination, data filtering, lazy loading, column stacking etc. The demo example below represents a superset of some of the features.  To view filtering functionality enter a sample of text or characters in the open text boxes at the top of each column (i.e. enter \u201c11\u201d in the text box in the MPG column. The filtered data rows will appear. Delete the entry to return to the original table. View pagination capability by clicking on the page numbers at the bottom of the table.</p>
# Column Reordering
example.ace.dataTable.columnReordering.title = Column Reordering Example
example.ace.dataTable.columnReordering.description = <p>The ace:dataTable supports re-ordering of columns through drag and drop if the columnOrdering attribute of the <b>&lt;ace:dataTable&gt;</b> is set to true. Column re-ordering can be turned on or off on a column by column basis.  In the example below click and hold the Cost column header cell with the let mouse button.  Drag the mouse / column to the left side of the table and release.</p>
# Row Editing
example.ace.dataTable.rowEditing.title = Row Editing Example
example.ace.dataTable.rowEditing.description = <p>Rows editing feature of the datatable can be enabled by placing a helper tag <b>&lt;ace:cellEditor&gt;</b> inside desired columns. In the example below click on the pencil image to edit a row.</p>
# Filtering
example.ace.dataTable.filtering.title = Filtering Example
example.ace.dataTable.filtering.description = <p>The <b>&lt;ace:dataTable&gt;</b> column and multi-column filtering capabilities. To view the demo, enter the character combination you wish to filter for by column in the blank field under the column header information. For example enter \u201c2\u201d in the Weight column field to view all cars with a \u201c2\u201d in their weight. Next enter a \u201cM\u201d in the Chassis column to further refine the search.</p>
# Sorting
example.ace.dataTable.sorting.title = Sorting Example
example.ace.dataTable.sorting.description = <p>Click on the up/down arrows embedded in the data table header fields to sort data in ascending or descending orders.</p>
# Paginator
example.ace.dataTable.paginator.title = Paginator Example
example.ace.dataTable.paginator.description = <p>The <b>&lt;ace:dataTable&gt;</b> allows developers to implement navigational controls embedded at the bottom or top of the data table to view specific data table pages, to increment / decrement page views or to skip to first / last pages. Use the control inputs located above the table to modify data table formatting options, then click through the data table using the navigational controls provided.</p>
# Scrolling
example.ace.dataTable.scrolling.title = Scrolling Example
example.ace.dataTable.scrolling.description = <p>Use the scroll wheel function on your mouse or touchpad, or the scroll bar located to the right of the table to scroll up or down through data table rows. Enable scrolling and table formatting (height) through the data fields located above the data table.</p>
#Lazy Loading
example.ace.dataTable.lazyLoading.title = Ultra-large Table Support
example.ace.dataTable.lazyLoading.description = <p>The <b>&lt;ace:dataTable&gt;</b> contains lazy loading algorithms to enable viewing and loading of very large data tables in quick and responsive manner. This table example below loads over 3,000,000+ records of random cars, displaying 31 of them per page across 2,000+ pages. Use the Data Table paginator option to move between pages, noting how quickly each page is loaded and rendered.</p>
# Selector
example.ace.dataTable.selector.title = Row Selector Example
example.ace.dataTable.selector.description = <p>Data Table Row Selector functionality allows users to select one or multiple rows / cells within a data table.  The selected row/cell is identified by formatted color change within the table and via the status information located below the data table.  Cell/Row selection toggles on/off with each click.  Selection behavioral attributes are set in the entry fields located above the table.</p>
# Listener
example.ace.dataTable.listener.title = Row Listener Example
example.ace.dataTable.listener.description = <p>Server side listeners for row selection or deselection events can be added to the data table. Next steps will be required in order to perform this functionality:</p><ul><li><b>&raquo;</b> Set <b>rowSelectListener / rowUnselectListener</b> attributes to point on the methods which will be invoked on the server side when the data table row is selected or unselected;</li><li><b>&raquo;</b> Create server side methods with following signatures:<i> </i><b>void methodName(SelectEvent event), public void methodName(UnselectEvent event);</b></li></ul>
# Row Expansion
example.ace.dataTable.rowexpansion.title = Row Expansion Example
example.ace.dataTable.rowexpansion.description = <p>In order to make rows of the data table expandable two helper tags must be used. The first one is called <b>&lt;ace:expansionToggler&gt;</b>and must be placed inside of the empty <b>&lt;ace:column&gt;</b> component. The second one is <b>&lt;ace:rowExpansion&gt;</b>and must be placed anywhere inside of the <b>&lt;ace:dataTable&gt;</b>.</p><p>Click on the row expansion arrows to the left side of the table to expand / collapse table row entries.</p>
# Panel Expansion
example.ace.dataTable.panelexpansion.title = Panel Expansion Example
example.ace.dataTable.panelexpansion.description = <p>In order to use panel expansion feature of the data table two helper tags must be used. The first one is called <b>&lt;ace:expansionToggler&gt;,</b>which must be placed inside of the empty <b>&lt;ace:column&gt;</b> component. The second one is <b>&lt;ace:panelExpansion&gt;</b> and must be placed anywhere inside of the <b>&lt;ace:dataTable&gt;</b>.</p><p>Click on the arrows in the leftmost column to expand and collapse inserted panel views.</p>
# Table Config
example.ace.dataTable.configpanel.title = User Control Panel Example
example.ace.dataTable.configpanel.description = <p>Datatable structure can be configured via the helper tag <b>&lt;ace:tableConfigPanel&gt;</b>. This tag features next attributes to help with table modifications:</p><ul><li><b>forTarget </b>\u2013 string data table id;</li><li><b>columnNameConfigurable </b>- if set to true, enable user to re-name columns for the targeted data table;</li><li><b>columnOrderingConfigurable </b>- if set to true, enable user to re-order columns sequence via drag and drop activity;</li><li><b>columnSizingConfigurable </b>- if set to true, enable user to re-size columns of the data table;</li><li><b>columnSortingConfigurable </b>- if set to true, enable data table sort on specified column in descending or ascending order;</li><li><b>columnVisibilityConfigurable </b>- if set to true, enable user to set which columns of the data table should be displayed;</li></ul><p>To view the Data Table User Control Panel click on the \u201cgear\u201d icon in the rightmost cell of the table header.</p>
# Row State
example.ace.dataTable.rowstate.title = Row State Example
example.ace.dataTable.rowstate.description = <p>Provides enhanced control for row selection, visibility and cell / row editability features. Select desired options from the input panel above the data table. To edit cell contents select Enable Editing for All or Selected. Click on the desired row and click on the pencil icon located in the rightmost column of the row you wish to edit. Edit the desired field and click the check mark icon in the edit column to confirm.</p>
# Column Stacking
example.ace.dataTable.stackable.title = Column Stacking Example
example.ace.dataTable.stackable.description = <p>The <b>&lt;ace:dataTable&gt;</b> component also allows developers to implement the \u201cstacking\u201d  of multiple columns in order to facilitate alternative viewing options when space is at a premium. The sample below illustrates a 7 column data table rendered in 4 columns.</p>

### ACE - Date Time Entry
menu.ace.dateentry.title = ace:dateTimeEntry
menu.ace.dateentry.subMenu.title = Examples
menu.ace.dateentry.subMenu.main = Overview
menu.ace.dateentry.subMenu.popup = Popup
menu.ace.dateentry.subMenu.ajax = Ajax Submit
menu.ace.dateentry.subMenu.pages = Multiple Months
menu.ace.dateentry.subMenu.navigator = Navigator
# Overview
example.ace.dateentry.title = Overview
example.ace.dateentry.description = <p> <b>&lt;ace:dateTimeEntry&gt;</b> is an input component used to input a date in a visual way. In addition to basic features the component supports paging, localization, ajax selection and more</p>
# Popup
example.ace.dateentry.popup.title = Date Entry Popup Example
example.ace.dateentry.popup.description = <p>View either the popup or input text version</p>
# Ajax Submit
example.ace.dateentry.ajax.title = Date Entry Ajax Submit Example
example.ace.dateentry.ajax.description = <p>Submit the date using Ajax</p>
# Multiple Months
example.ace.dateentry.pages.title = Date Entry Multiple Months Example
example.ace.dateentry.pages.description = <p>Display multiple pages of months in a single calendar</p>
# Navigator
example.ace.dateentry.navigator.title = Date Entry Dropdown Navigator Example
example.ace.dateentry.navigator.description = <p>Display the year and month as a dropdown</p>

### ACE - Dialog
menu.ace.dialog.title = ace:dialog
menu.ace.dialog.subMenu.main = Overview
menu.ace.dialog.subMenu.effectsAndSize = Effects & Size
menu.ace.dialog.subMenu.modalDialog = Modal & Movable
# Overview
example.ace.dialog.title = Overview
example.ace.dialog.description = <p>A dialog is a floating window that contains a title bar and a content area. The dialog component can be moved, resized and closed (via mouse click on "X" or by pressing the Esc button) by  default. If the content length exceeds the maximum height, a scrollbar will automatically appear. Some popular options that can be applied to the dialog are: semi-transparent modal overlay layer, hide and open effects and minimum height and width.</p>
# Size & Effects
example.ace.dialog.dialogEffectAndSize.title = Dialog Animation Effects and Size Configurability Example
example.ace.dialog.dialogEffectAndSize.description = <p>Dialog <b>minWidth</b> and <b>minHeight</b> properties can be used to achieve desired dialog size. There are also various effect options, that can be used when displaying and closing the dialog. Use <b>showEffect</b> and <b>hideEffect </b>options to apply these effects; Here is the list of possible options: <i>blind, bounce, clip, drop, explode, fade, fold, highlight, puff, pulsate, scale, shake, slide.</i></p>
# Modal Dialog
example.ace.dialog.modalDialog.title = Modal and Movable Dialog Examples
example.ace.dialog.modalDialog.description = <p>If modal option set to true, other items on the page will be disabled (i.e. cannot be interacted with). Modal dialogs create an overlay below the dialog but above other page elements.</p>

### ACE - Drag and Drop
menu.ace.dragDrop.title = ace:draggable/droppable
menu.ace.dragDrop.subMenu.main = Overview
menu.ace.dragDrop.subMenu.draggable = Draggable
menu.ace.dragDrop.subMenu.dataTableIntegration = Table Integration
# Overview
example.ace.dragDrop.title = Overview
example.ace.dragDrop.description = <p>Drag and Drop options are available in ICEfaces via two distinctive components <b>&lt;ace:draggable&gt;</b> and <b>&lt;ace:droppable&gt;</b>. The Drop component also has a proximity to establish what % of alignment is required between the object and the drop target.  In the demo below the droppable item must be 100% aligned within the drop box.</p>
# Draggable 
example.ace.draggable.title = Draggable Component Example
example.ace.draggable.description = <p>Draggable component features a list of customizable options which can be adjusted according to application requirements.</p>
# Data Table Integration
example.ace.dataTableIntegration.title = Data Table Integration Example
example.ace.dataTableIntegration.description = <p>Draggable and droppable behaviour can be integrated with data table.</p>

### ACE - FileEntry
menu.ace.fileentry.title = ace:fileEntry
menu.ace.fileentry.subMenu.title = Examples
menu.ace.fileentry.subMenu.main = Overview
menu.ace.fileentry.subMenu.basic = Basic
menu.ace.fileentry.subMenu.validation = Validation
menu.ace.fileentry.subMenu.multiple = Multiple
menu.ace.fileentry.subMenu.failpop = Failed Popup
# Overview
example.ace.fileentry.title = Overview
example.ace.fileentry.description = <p>The ACE File Entry Component performs all interface functions regarding file submission. The example below demonstrates:</p> <ul><li> - A FileEntryListener that adds a message with the uploaded file size and size of the temp directory.</li><li> - Limits file size to 6MB.</li><li> - Requires file for form submission.</li><li> - Stores the file with the original filename in a web-root relative path.</li></ul>
# Basic
example.ace.fileentry.basic.title = Basic Upload Example 
example.ace.fileentry.basic.description = <p>The basic file entry example below will receive a file and put it in a sub-directory directly inside the root application directory. That sub-directory will be unique to each session, and all the files uploaded to it will be given randomly generated name. The ace:fileEntry tag used on this page has no attributes set.</p>
# Validation Options
example.ace.fileentry.valid.title = Validation Example 
example.ace.fileentry.valid.description = <p>The file entry example below demonstrates attributes related to the validity of the uploaded file, and the state of the component in the form (disabled/required)</p>
# Multiple File Upload Options
example.ace.fileentry.multiple.title = Multiple Upload Example 
example.ace.fileentry.multiple.description = <p>The file entry example below demonstrates attributes related to functionality of the component that has not yet been completed, though they are documented in the TLD.</p>
# Fail Popup
example.ace.fileentry.failpop.title = Popup Validation Example
example.ace.fileentry.failpop.description = <p>The file entry example below demonstrates a compound example of functionality whose completion that is waiting on a showcase wide popup component.</p>

### ACE - LinkButton
menu.ace.linkButton.title = ace:linkButton
menu.ace.linkButton.subMenu.title = Examples
menu.ace.linkButton.subMenu.main = Overview
# Overview
example.ace.linkButton.title = Overview
example.ace.linkButton.description = <p>The <b>&lt;ace:linkButton&gt;</b>component can be used for: executing listeners, action navigation and form submission. The LinkButton component is built around the HTML anchor tag, and as such it can be used to perform non-jsf "static" HTML navigation from the current URL to a different relative or absolute URL.</p><p>The example below demonstrates buttons that avoid form submission, perform form submission, perform Action navigation, HTML navigation and listener-based view forwarding.</p>

### ACE - Masked Entry
menu.ace.maskedEntry.title = ace:maskedEntry
menu.ace.maskedEntry.subMenu.main = Overview
# Overview
example.ace.maskedEntry.title = ACE Masked Entry Component
example.ace.maskedEntry.description = <p>The Masked Entry Component is a text input component that forces input to be formatted in a specific way. Masked definition of the components are not regular expressions. When setting a mask for this component the following definitions can be used:</p><ul><li><b>\u201ca\u201d</b> \u2013 represents alphabetical characters (A...Z, a...z);</li><li><b>\u201c9\u201d</b> - represents a numeric character (0...9); </li><li><b>\u201c*\u201d</b> - represents an alphanumeric character (A..Z, a...z, 0...9);</li><li><b>\u201c?\u201d</b> \u2013marks the point in the mask after which any entered characters are optional (mask will not reset itself on lost focus);</li></ul>

### ACE - Menu
menu.ace.menu.title = ace:menu
menu.ace.menu.subMenu.title = Examples
menu.ace.menu.subMenu.main = Overview
menu.ace.menu.subMenu.type = Type
menu.ace.menu.subMenu.events = Action Events
menu.ace.menu.subMenu.effect = Effects
menu.ace.menu.subMenu.display =  Trigger Events
menu.ace.menu.subMenu.dynamic = Dynamic
# Overview
example.ace.menu.title = Overview
example.ace.menu.description = <p>The ACE Menu Components provide general purpose page / application navigational and input features. They support various animation effects, layout formats and positioning options.</p>
# Type
example.ace.menu.type.title = Menu Type Example
example.ace.menu.type.description = <p>ACE Menu Components support plain, tiered, and sliding menu types.</p>
# Events
example.ace.menu.events.title = Menu Events Example
example.ace.menu.events.description = <p>ACE Menu Components support action listeners and links.</p>
# Effects
example.ace.menu.effect.title = Menu Effects Example
example.ace.menu.effect.description = <p>ACE Menu Components support a variety of transitional effects.</p>
# Display
example.ace.menu.display.title = Event Triggered Menu Example
example.ace.menu.display.description = <p>The Menu Display feature allows menus to appear / popup during mouse overs of specific page regions.  Mouse over the button below to demonstrate.  Click outside the menu region to cause the menu to disappear.</p>
# Dynamic
example.ace.menu.dynamic.title = Menu Dynamic Example
example.ace.menu.dynamic.description = <p>Dynamic menu description</p>

### ACE - Menu Bar
menu.ace.menuBar.title = ace:menubar
menu.ace.menuBar.subMenu.title = Examples
menu.ace.menuBar.subMenu.main = Overview
menu.ace.menuBar.subMenu.effect = Effects
menu.ace.menuBar.subMenu.click = Click to Display
menu.ace.menuBar.subMenu.dynamic = Dynamic
# Overview
example.ace.menuBar.title = Overview
example.ace.menuBar.description = <p>The ACE Menu Bar Components provide customizable menu functions in a traditional menu bar format.</p>
# Effects
example.ace.menuBar.effect.title = Menu Bar Effects Example
example.ace.menuBar.effect.description = <p>Menu Bar supports a variety of transitional effects.</p>
# Click to Display
example.ace.menuBar.click.title = Menu Bar Click to Display Example
example.ace.menuBar.click.description = <p>On mouse over menu auto display feature can be enabled or disabled via convenient component attribute</p>
# Dynamic
example.ace.menuBar.dynamic.title = ACE Menu Bar Dynamic Example
example.ace.menuBar.dynamic.description = <p>The ability to modify (add / delete) Menu Bar elements dynamically is seen in the example below.</p>

### ACE - Notification Panel
menu.ace.notificationpanel.title = ace:notificationPanel
menu.ace.notificationpanel.subMenu.title = Examples
menu.ace.notificationpanel.subMenu.main = Overview
# Overview
example.ace.notificationpanel.title = Overview
example.ace.notificationpanel.description = <p> Notification Panel is a container component. Any content can be placed inside it. Notification panel features next set of options:</p><ul><li><b>widgetVar.<i>show()</i></b> and <b>widgetVar.<i>hide()</i></b> - convenient client side API to show and hide the panel respectfully</li><li><b>Effects</b>: fade (default), slide, none (if you would like to turn off animation)</li><li><b>Effect speed</b>: 'normal', 'slow', 'fast'</li><li><b>Position</b>: top(default), bottom</li></ul><p>Click on the button bellow to see some of those features:</p>

### ACE - Panel
menu.ace.panel.title = ace:panel
menu.ace.panel.subMenu.title = Examples
menu.ace.panel.subMenu.main = Overview
menu.ace.panel.subMenu.header = Headers
menu.ace.panel.subMenu.toggle = Toggleable
menu.ace.panel.subMenu.close = Closeable
menu.ace.panel.subMenu.listener = Listeners
menu.ace.panel.subMenu.menu = Menu
# Overview 
example.ace.panel.title = Overview
example.ace.panel.description = <p>The ACE Panel Component is a generic layout container that supports custom header / footers, accordion toggling, open, close and menu features.</p>
# Headers
example.ace.panel.header.title = Panel Header and Footer Example
example.ace.panel.header.description = <p>The example below demonstrates dynamic addition, deletion of panel header / footer text.</p>
# Toggleable
example.ace.panel.toggle.title = Toggleable Panel Example
example.ace.panel.toggle.description = <p>The Toggleable example below illustrates how the ACE Panel Component can be expanded or collapsed by the viewer.</p>
# Closeable
example.ace.panel.close.title = Closeable Panel Example
example.ace.panel.close.description = <p>The Closeable example below illustrates how the ACE Panel Component can be opened or closed by the viewer.</p>
# Listener
example.ace.panel.listener.title = Panel Listener Example
example.ace.panel.listener.description = <p>The ACE Panel Listener example below illustrates various toggle events captured by the Listener.  Click on the \u201c-\u201c and \u201cx\u201d buttons to the right of the panel and watch the Listener Status report update.</p>
# Menu
example.ace.panel.menu.title = Panel Menu Example
example.ace.panel.menu.description = <p>The ACE Panel Menu example illustrates menu integration within a panel component.  Press the icon on the top right corner of the panel header to expose the menu options pertaining to the panel.</p>

### ACE - Printer
menu.ace.printer.title = ace:printer
menu.ace.printer.subMenu.title = Examples
menu.ace.printer.subMenu.main = Overview
# Overview
example.ace.printer.title = Overview
example.ace.printer.description = <p><b>&lt;ace:printer&gt;</b> tag can be used to send specific component to the printer without printing an entire page. Click on the links below to see it in action.</p>

### ACE - Progress Bar
menu.ace.progressbar.title = ace:progressBar
menu.ace.progressbar.subMenu.title = Examples
menu.ace.progressbar.subMenu.main = Overview
menu.ace.progressbar.subMenu.polling = Polling
menu.ace.progressbar.subMenu.push = Push
menu.ace.progressbar.subMenu.client = Client Side
menu.ace.progressbar.subMenu.clientAndServer = Client/Server
# Overview
example.ace.progressbar.title = Overview
example.ace.progressbar.description = <p>ProgressBar is a status indicator that can work on client side only or interact with server via AJAX.</p><p>The example below demonstrate basic features of the progress bar. For more specific examples please check other sections of this showcase.</p>
# Polling
example.ace.progressBarPoling.title = Progress Bar Polling Example
example.ace.progressBarPoling.description = <p>AJAX Polling feature can be applied to the progress bar.</p><ul><li><b>pollingInterval (int) </b>- set progress bar polling interval, default value is 3000 ms;</li><li><b>usePolling (boolean)</b> - enable AJAX polling feature when set to true, default value is false;</li><li><b>widgetVarName.start() (client side API) </b>- start AJAX polling </li><li><b>widgetVarName.cancel() (client side API) </b>- cancel AJAX polling </li><li><b>completeListener </b>- server side listener to execute once progress reaches 100%</li></ul><p>To see polling in action, select a picture from the drop down menu below. Once selected the picture will appear in the 'Upload Manager' (not shown initially). Click on the upload button in the manager to start AJAX polling.</p>
# Push
example.ace.progressBarPush.title = Progress Bar With Push Example
example.ace.progressBarPush.description = <p>ICEfaces Push can be used with progress bar. Open 2 different browsers and point them to this page. Click start button in one of them. Notice how running progress in one browser send updates to another via Push.</p>
# Progress Bar on Client Side
example.ace.progressBarClientSideOnly.title = Client Side Progress Bar Example
example.ace.progressBarClientSideOnly.description = <p>Progress bar can operate purely on the client side. Click the 'Start' button to begin progress or 'Cancel' button to stop it while progress is running.</p>
#Progress Bar on Client and Server side
example.ace.progressBarClientAndServer.title =  Client + Server Side Progress Bar Example
example.ace.progressBarClientAndServer.description = <p>Client side JavaScript API of the progressBar component can be used in conjunction with its server side listeners. This example demonstrates:</p><ul><li><b>widgetVar.setValue()</b> and <b>widgetVar.getValue()</b> - client side API methods useful to increase or decrease the value of a progressBar;</li><li><b>changeListener</b>- server side listener which is called on each modification of the progress bar state;</li></ul><p>Click on the buttons to see above features in action</p>

### ACE - PushButton
menu.ace.pushButton.title = ace:pushButton
menu.ace.pushButton.subMenu.title = Examples
menu.ace.pushButton.subMenu.main = Overview
# Overview
example.ace.pushButton.title = Overview
example.ace.pushButton.description = <p>The <b>&lt;ace:pushButton&gt;</b> component performs basic button functionality and can be used for:</p> <ul><li><b>&raquo;</b> executing listeners</li> <li><b>&raquo;</b> action navigation and</li> <li><b>&raquo;</b> form submission</li></ul><p>The example below demonstrates various button implementations that avoid form submission, perform form submission, perform Action navigation and listener-based view forwarding.</p>

### ACE - Resizable
menu.ace.resizable.title = ace:resizable
menu.ace.resizable.subMenu.main = Overview
menu.ace.resizable.subMenu.resizeListener = Resize Listener
# Overview
example.ace.resizable.title = Overview
example.ace.resizable.description = <p>Resizable component has the ability to make any JSF component resizable. Resizable can be used on various components like input fields, panels, menus, images etc. Component options allow the Resizing functions to operate in one or two directions as illustrated below.</p>
# Resizable Listener
example.ace.resizableListener.title = Resizable Listener Example
example.ace.resizableListener.description = <p>A listener can be attached to the resizable component in order to process custom server side logic.</p>

### ACE - Slider
menu.ace.slider.title = ace:sliderEntry
menu.ace.slider.subMenu.title = Examples
menu.ace.slider.subMenu.main = Overview
menu.ace.slider.subMenu.basic = Synchronous
menu.ace.slider.subMenu.async = Asynchronous
menu.ace.slider.subMenu.asyncinput = Input
# Overview
example.ace.slider.title = Overview
example.ace.slider.description = <p>The SliderEntry is a scalable input component. The example below demonstrates a variety of the attributes available such as:</p><ul><li>- Setting a value by clicking the slider path.</li><li>- A fixed min/max &amp; length.</li><li>- Asynchronous submission of the value of the slider.</li></ul>
# Basic
example.ace.slider.basic.title = Basic Slider Example
example.ace.slider.basic.description = <p>The following example illustrates basic slider function in synchronous mode. Drag the slider left or right and click on \u201cSet Slider Value\u201d button to view the value.  Various layout and functional options are available on the right.</p>
# Asynchronous
example.ace.slider.async.title = AJAX Slider Example
example.ace.slider.async.description = <p>The following example illustrates basic slider function in asynchronous mode. Drag the slider left or right.  Value automatically updates upon mouse up even associated with releasing the slider. Various layout and functional options are available on the right.</p>
# Ansynchronous Input
example.ace.slider.asyncinput.title = Ansynchronous Input Slider Example
example.ace.slider.asyncinput.description = <p>The following example illustrates basic slider function in asynchronous input mode. Slider position automatically updates when you input a value between -30 and 150 in the input box and then hit the enter key. Various layout and functional options are available on the right.</p>

### ACE - TabSet
menu.ace.tabSet.title = ace:tabSet
menu.ace.tabSet.subMenu.title = Examples
menu.ace.tabSet.subMenu.main = Overview
menu.ace.tabSet.subMenu.clientSide = Client Side
menu.ace.tabSet.subMenu.serverSide = Server Side
menu.ace.tabSet.subMenu.proxy = Proxy
# Overview
example.ace.tabSet.title = Overview
example.ace.tabSet.description = <p>The TabSet Component is used to divvy up the content of a page into panels that are shown one at a time. These panels can either be stored in the browser to reduce load times, or on server to reduce initial bandwidth demands. The component can be run within a form, or have the tabPanes contain their own forms, having the tabSet do communications via a 'TabSet Proxy'.</p><p>The TabSet example below is one without any attributes set. It hosts its tabPanes server-side and has hardcoded labels and content.</p>
# Client Side
example.ace.tabSet.clientSide.title = Client Side TabSet Example
example.ace.tabSet.clientSide.description = <p>Below is a demo of the TabSet component where the contents of the TabPanes are kept loaded in the clients browsers, eliminating any data transfer to change tabs.</p><p>The 'Fast Loading Tabs' option toggles a wait that will occur whenever a tab is fetched from the server.</p>
# Server Side
example.ace.tabSet.serverSide.title = Server Side TabSetExample
example.ace.tabSet.serverSide.description  = <p>Below is a demo of the TabSet component where the contents of the TabPanes are kept in the server, requiring less initial data transfer, but needing to transfer the contents every time the tab is changed.</p><p>The 'Fast Loading Tabs' option toggles a wait that will occur whenever a tab is fetched from the server.</p>
# Proxy
example.ace.tabSet.proxy.title = TabSet Proxy Example
example.ace.tabSet.proxy.description = <p>Below is a demo of the TabSet component where the the tabSetProxy tag is used. This tag allow the tabSet to be located outside of a form, (allowing tabPanes to contain their own forms) while keeping a means to communicate with the server, via a 'proxy' in the nested form specifically for its traffic.</p>

### ACE - Tooltip
menu.ace.tooltip.title = ace:tooltip
menu.ace.tooltip.subMenu.title = Examples
menu.ace.tooltip.subMenu.main = Overview
menu.ace.tooltip.subMenu.globalTooltip = Global
# Overview
example.ace.tooltip.title = Overview
example.ace.tooltip.description = <p>ACE Tooltip provide rich set of customizable options right out of the box. Next set of attributes are available for this component:</p><ul><li><b>showEffect</b> and <b>hideEffect</b>(String) - animation effect to use when tooltip appear or disappear, default value is 'fade';</li><li><b>showEffectLength </b>and <b>hideEffectLength </b>(String) - duration of the effect animation, default values is 100ms;</li><li><b>showDelay</b> and <b>hideDelay</b>(int) - tooltip delay timers, default values are 140ms and 0ms;</li><li><b>showEvent</b> and <b>hideEvent</b>(String) - DOM event name which should cause the tooltip to pop, default value is 'mouseover';</li><li><b>targetPosition</b>(String) - corner of the target element to position the tooltip by, default value is 'bottomRight';</li><li><b>position</b>(String) - corner of the tooltip to position the target's position, default value is 'topLeft';</li><li><b>global </b>(boolean) - if set to true, converts each title attribute to the ace:tooltip</li><li><b>for</b> (String) - id of the component to attach the tooltip</li></ul><p>The example below demonstrate various features of the tooltip component.</p>
# Global
example.ace.globalTooltip.title = Global Tooltip Example
example.ace.globalTooltip.description = <p>ACE Tooltip can be used in a global mode. Set global attribute of the tooltip as TRUE to enable this feature. In this mode all components on the page which have the title attribute set will have their regular tooltip replaced with ace:tooltip </p>

### ACE - Logger
menu.ace.logger.title = Logger
menu.ace.logger.subMenu.title = Examples
menu.ace.logger.subMenu.main = Overview
# Overview
example.ace.logger.title = Logger Component
example.ace.logger.description = <p>The ACE Logger component is based around the one offered by the YUI toolkit, providing a standardized way of reading and writing log messages. When the tag is present on the page it adds divs containing the log controls to the root of the DOM. In this example, to prevent root placement from breaking page flow, the class .yui-log-container is positioned to fixed values similarly to a popup. The logs will have a record for every Javascript call to YAHOO.log().</p><p>The example below has a button to display the logger and some example controls to generate arbitrary Javascript messages using YAHOO.log().</p>

################################################################################
# UNUSED messages
################################################################################
### ACE - Button
menu.ace.button.title = Buttons
menu.ace.button.subMenu.title = Examples
menu.ace.button.subMenu.main = Overview
# Overview
example.ace.button.title = ACE Button Components
example.ace.button.description = <p>The ACE Button Components provide the functionality of the standard JSF implementations while integrating ICEfaces features such as Single Submit. Buttons can be used for:</p><p>1. Action navigation via the application NavigationController and the "action" attribute.<br/>2. Presenting a clickable UI control for a listener<br/>3. Performing a full form submission when <b>&lt;f:ajax&gt;</b> or singleSubmit is not being used.<br></p><p>Below is a example of each button configured as the control for a simple listener.</p>
################################################################################
# ICE Components (ICE)                                          #
################################################################################

### ICE - Suite Overview
menu.compat.iceSuiteOverview.title = Suite Overview
menu.compat.iceSuiteOverview.subMenu.title = Examples
menu.compat.iceSuiteOverview.subMenu.main = Overview
# Overview
example.compat.iceSuiteOverview.title = Suite Overview
example.compat.iceSuiteOverview.description = <h2>What are the ICE Components?</h2><p>ICE suite components are an open-source Rich Internet Application (RIA) development framework based on the JavaServer Faces (JSF) 2 standard. Like its predecessor, ICEfaces 1.8, ICEfaces 2 extends JSF to simplify development and enhance the standard JSF feature set - simultaneously improving developer efficiency and expanding the spectrum of RIA capabilities that can be included in any JSF-based web application.</p><h2>How are the ICE Components licensed?</h2><p>ICE components suite is an open source project licensed under Mozilla Public License, so you can develop and deploy with it, without any commercial licensing restrictions. You get all the advantages of a vibrant open source community, including a well-exercised code base, developer forums, and this wiki loaded with documentation and tutorials</p><h2>Where can I access technical information regarding the components?</h2><p>Source code samples of each demo are located at the bottom of each demo page being viewed. Links to TLD and technical documentation / tutorials are located on the header bar of each demo.</p><h2>When should I use ACE vs. ICE Components?</h2><p>The ICE Components have been re-engineered to ensure ICEfaces 1.X compatibility with ICEfaces 2, providing easy migration of ICEfaces 1.x applications to ICEfaces 2.</p><p>In contrast to the ACE Components, the ICE Components predominantly leverage server-side rendering techniques providing superior performance on older web browsers with less efficient JavaScript engines.</p><p>Use ICE Components under the following circumstances:</p><ul><li><b>&raquo;</b> Migrate existing ICEfaces 1.X to ICEfaces 2.X.  The ICE components have been re-engineered in ICEfaces 2.X to be tag compatible with previous 1.X releases.  This greatly simplifies the migration from 1.X applications to ICEfaces 2.X.</li><li><b>&raquo;</b> Support older browser versions such as Internet Explorer 6/7.  Older browsers typically have significantly less efficient JavaScript processing engines.  The ICE Components predominantly exercise server-side processing therefore yielding better performance on earlier browsers. </li><li><b>&raquo;</b> Maximize server-side processing.  For security reasons, developers may wish to minimize client-side processing. If this is the case, ICE Components may be better suited.</li></ul><p>Use ACE Components library under the following conditions:</p><ul><li><b>&raquo;</b> 	Use richer JSF 2-based components.  Future development of ICEfaces components will focus on ACE rather than ICE.  The ACE Components will continue to evolve rapidly, continuously introducing new features and capabilities.</li><li><b>&raquo;</b> 	Faster client-side component rendering. More recent browsers have highly optimized JavaScript processing capabilities.  The ACE Components generally implement more client-side JavaScript, relying on the client browser to do more of the rendering. ACE Components will yield faster rendering times over ICE components, especially on more recent browsers.</li></ul>
### ICE - Columns
menu.compat.columns.title = ice:columns
menu.compat.columns.subMenu.title = Examples
menu.compat.columns.subMenu.main = Overview
menu.compat.columns.subMenu.checker = Checkerboard
# Overview
example.compat.columns.title = Overview
example.compat.columns.description = <p>The columns component is useful for displaying a 2D grid, which is otherwise not easily achievable with a dataTable or other iterator component.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Enter a number of rows and columns and click "Apply Changes".</li><li><b>&raquo;</b> Observe the resulting layout displayed by the columns component.</li></ul>
# 2D Array
example.compat.columns.checker.title = Checkerboard Example
example.compat.columns.checker.description = <p>Example rendering a checkerboard using the columns component.</p>

### ICE - Data Exporter (Data Table)
menu.compat.exporter.title = ice:dataExporter
menu.compat.exporter.subMenu.title = Examples
menu.compat.exporter.subMenu.main = Overview
menu.compat.exporter.subMenu.type = Type
menu.compat.exporter.subMenu.column = Include Columns
menu.compat.exporter.subMenu.pagination = Ignore Pagination
menu.compat.exporter.subMenu.label = Custom Label
# Overview
example.compat.exporter.title = Overview
example.compat.exporter.description = <p>The exporter component lets users download the contents of a data table as either a CSV or Excel file, which can be useful for saving search results or other information traditionally displayed with a data table. From a developer perspective the exporter is simple to use, as they just include the component in the page to enable the functionality. Labels and other options can be customized as needed.</p><p>Click the "Download as CSV" link to save the data table below as a file full of comma-separated-values.</p>
# Type
example.compat.exporter.type.title = Custom File Type Export Example
example.compat.exporter.type.description = <p>Select which file type will be used for export below.</p>
# Include Columns
example.compat.exporter.column.title = Custom Columns Export Example
example.compat.exporter.column.description = <p>Select which which columns to include in the export below.</p>.
# Ignore Pagination
example.compat.exporter.pagination.title = Ignore Pagination Example
example.compat.exporter.pagination.description = <p>Pagination of the table can be ignored or accounted for during data export</p>
# Custom Label
example.compat.exporter.label.title = Exporter Custom Label Example
example.compat.exporter.label.description = <p>Render a button, image, or custom text for the label.</p>

### ICE - Data Paginator (Data Table)
menu.compat.paginator.title = ice:dataPaginator
menu.compat.paginator.subMenu.title = Examples
menu.compat.paginator.subMenu.main = Overview
menu.compat.paginator.subMenu.info = Info Paginator
menu.compat.paginator.subMenu.events = Events
menu.compat.paginator.subMenu.max = Max Pages
menu.compat.paginator.subMenu.fast = Fast Step
menu.compat.paginator.subMenu.display = Always Display
menu.compat.paginator.subMenu.vertical = Vertical
# Overview
example.compat.paginator.title = Overview
example.compat.paginator.description = <p>The paginator component is useful for moving through large sets of data in a data table. The displayed pages, step count, etc. can be customized through the component. A developer can implement lazy loading in their data table so that only the displayed rows are stored in memory, instead of the entire data set. This is extremely useful for large sets of data read from a database.</p> <p>In the example below enter a number of rows to display in the data table at once. If the rows exceed the displayed amount a paginator will show up and can be used to move through the available data</p>
# Info
example.compat.paginator.info.title = Paginator With Additional Information Example
example.compat.paginator.info.description = <p>View an information based paginator, which displays text information about the associated data table.</p>
# Events
example.compat.paginator.events.title = Paginator Events Example
example.compat.paginator.events.description = <p>Paginator events can be fired and listened to.</p>
# Max Pages
example.compat.paginator.max.title = Max Paginator Pages Example
example.compat.paginator.max.description = <p>Number of pages to display at once in the paginator can be customized.</p>
# Fast Step
example.compat.paginator.fast.title = Fast Step Paginator Example
example.compat.paginator.fast.description = <p>Fast step feature of the paginator can be customized.</p>
# Always Display
example.compat.paginator.display.title = Always Display Paginator Example
example.compat.paginator.display.description = <p>Display the paginator only when needed.</p>
# Vertical
example.compat.paginator.vertical.title = Vertical Paginator Example
example.compat.paginator.vertical.description = <p>Render the data paginator vertically instead of horizontally.</p>

### ICE - Data Table (Generic)
menu.compat.dataTable.title = ice:dataTable
menu.compat.dataTable.subMenu.title = Examples
menu.compat.dataTable.subMenu.main = Overview
menu.compat.dataTable.subMenu.rows = Displayed Rows
menu.compat.dataTable.subMenu.group = Column Grouping
menu.compat.dataTable.subMenu.hide = Column Hiding
menu.compat.dataTable.subMenu.resize = Column Resizing
menu.compat.dataTable.subMenu.widths = Column Widths
menu.compat.dataTable.subMenu.client = Client Only Resizing
menu.compat.dataTable.subMenu.sort = Sorting
menu.compat.dataTable.subMenu.scroll = Scrolling
menu.compat.dataTable.subMenu.dynamic = Dynamic
# Overview
example.compat.dataTable.title = Overview
example.compat.dataTable.description = <p>The data table component is a powerful improvement on the standard JSF dataTable. Additional functionality like sorting, pagination, resizing, row selection, scrolling, etc. are added. In general a data table is used to display a list of data, such as records generated from a database.</p><p>Example below will allow you to:</p><ul><li><b>&raquo;</b> Sort the data table by clicking a header (such as Name) and observing the result.</li><li><b>&raquo;</b> Page through the data by using the paginator buttons at the bottom of the data table.</li><li><b>&raquo;</b> Resize the columns by clicking and dragging the thick gray bar between each column.</li></ul>
# Rows
example.compat.dataTable.rows.title = Displayed Rows Example
example.compat.dataTable.rows.description = <p>Customize how many rows to display at once.</p>
# Grouping
example.compat.dataTable.group.title = Column Grouping Example
example.compat.dataTable.group.description = <p>The car data below is sorted and grouped by Chassis. Also note the grouped header for the last four column headers.</p>
# Hiding
example.compat.dataTable.hide.title = Column Hiding Example
example.compat.dataTable.hide.description = <p>Hide or display columns inside a data table.</p>
# Resizing
example.compat.dataTable.resize.title = Column Resizing Example
example.compat.dataTable.resize.description = <p>Resizable data table.</p>
# Resizing Widths
example.compat.dataTable.widths.title = Column Resizing Widths Example
example.compat.dataTable.widths.description = <p>Customize the widths of the resizable columns.</p>
# Client Only Resizing
example.compat.dataTable.client.title = Client Only Resizing Example
example.compat.dataTable.client.description = <p>Toggle column resizing to be stored only on the client.</p>
# Sorting
example.compat.dataTable.sort.title = Data Table Sorting Example
example.compat.dataTable.sort.description = <p>Sorting a data table.</p>
# Scrolling
example.compat.dataTable.scroll.title = Scrollable Data Table Example
example.compat.dataTable.scroll.description = <p>Scrollable data table.</p>
# Dynamic
example.compat.dataTable.dynamic.title = Dynamic Data Table Example
example.compat.dataTable.dynamic.description = <p>Modify the data table by adding, removing, or updating records.</p>

### ICE - Map
menu.compat.map.title = ice:gMap
menu.compat.map.subMenu.title = Examples
menu.compat.map.subMenu.main = Overview
menu.compat.map.subMenu.address = Address
menu.compat.map.subMenu.controls = Controls
menu.compat.map.subMenu.latlong = Latitude/Longitude
menu.compat.map.subMenu.load = Load XML
menu.compat.map.subMenu.type = Render Type
menu.compat.map.subMenu.zoom = Zoom Level
# Overview
example.compat.map.title = Overview
example.compat.map.description = <p>The map component wraps the Google Map API and allows ICEfaces developers to easily access mapping functionality in their application. The display controls, size, map type, zoom level, etc. can be customized.</p> <p>In the example below:</p><ul><li><b>&raquo;</b> Enter a street address to look up into the input field.</li><li><b>&raquo;</b> Click "Perform Lookup" to display the address using the map component below.</li></ul>
# Address
example.compat.map.address.title = Google Map Address
example.compat.map.address.description = <p>Lookup a single address or get directions between two locations (including optional text directions).</p>
# Controls
example.compat.map.controls.title = Google Map Controls
example.compat.map.controls.description = <p>Show the different map controls available with the component.</p>
# Latitude/Longitude
example.compat.map.latlong.title = Google Map Latitude/Longitude
example.compat.map.latlong.description = <p>Locate preset locations with latitude and longitude coordinates.</p>
# Load XML
example.compat.map.load.title = Google Map Load KML
example.compat.map.load.description = <p>Load a series of map locations from KML, such as a community provided list of restaurants.</p>
# Type
example.compat.map.type.title = Google Map Type
example.compat.map.type.description = <p>Set the rendering type the map will use, such as Satellite.</p>
# Zoom
example.compat.map.zoom.title = Google Map Zoom Level
example.compat.map.zoom.description = <p>Dynamically set the zoom level from the bean level.</p>

### ICE - Rich Text
menu.compat.richtext.title = ice:inputRichText
menu.compat.richtext.subMenu.title = Examples
menu.compat.richtext.subMenu.main = Overview
menu.compat.richtext.subMenu.save = Save on Submit
menu.compat.richtext.subMenu.language = Language
menu.compat.richtext.subMenu.skin = Skins
menu.compat.richtext.subMenu.toolbar = Toolbar
menu.compat.richtext.subMenu.disable = Disable
# Overview
example.compat.richtext.title = Overview
example.compat.richtext.description = <p>The rich text component wraps the CKEditor and allows users to easily format and customize their input. All entered text is stored as plain HTML on the server, so developers can redisplay the text, save it as a document, etc. as needed. The appearance and language of the rich text component can be customized.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Use the various features of the rich text editor such as bolding text, inserting links, adding lists, etc.</li><li><b>&raquo;</b> Click the "Save" button (icon of a floppy disk) to submit the entered text to the server.</li><li><b>&raquo;</b> Entered text will display under the "Saved Text String" field at the bottom.</li></ul>
# Save on Submit
example.compat.richtext.save.title = Rich Text Save on Submit Example
example.compat.richtext.save.description = <p>Choose whether the Rich Text component should save anytime a submit is done, or only when the Save button is explicilty clicked by the user.</p>
# Language
example.compat.richtext.language.title = Rich Text Language Example
example.compat.richtext.language.description = <p>Choose from 54 available languages for the Rich Text component.</p>
# Skin
example.compat.richtext.skin.title = Rich Text Skins Example
example.compat.richtext.skin.description = <p>Choose from 3 different skin themes for the Rich Text component.</p>
# Toolbar
example.compat.richtext.toolbar.title = Rich Text Toolbar Example
example.compat.richtext.toolbar.description = <p>View the basic or feature rich toolbars for the Rich Text component.</p>
# Disable
example.compat.richtext.disable.title = Rich Text Disabled State Example
example.compat.richtext.disable.description = <p>View how the disabled state of the Rich Text component appears and functions.</p>

### ICE - Menu Bar
menu.compat.menuBar.title = ice:menuBar
menu.compat.menuBar.subMenu.title = Examples
menu.compat.menuBar.subMenu.main = Overview
menu.compat.menuBar.subMenu.events = Events
menu.compat.menuBar.subMenu.orientation = Orientation
menu.compat.menuBar.subMenu.click = Display on Click
menu.compat.menuBar.subMenu.keyboard = Keyboard Navigation
menu.compat.menuBar.subMenu.icons = Icons
menu.compat.menuBar.subMenu.separator = Separator
menu.compat.menuBar.subMenu.dynamic = Dynamic
# Overview
example.compat.menuBar.title = Overview
example.compat.menuBar.description = <p>The menu bar component is an easy way to add cross-browser Javascript based menus, which are useful for navigation or accessing functionality of a web application. The layout and ordering of the menu is created using a hierarchical series of parent-child menu components.Each component can be customized with text, icons, and style. The items can either link to a page or perform an action on the server.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Mouse over each menu option to display their submenu items</li></ul>
# Events
example.compat.menuBar.events.title = Menu Bar Events Example
example.compat.menuBar.events.description = <p>Fire events when different menu items are clicked on.</p>
# Orientation
example.compat.menuBar.orientation.title = Menu Bar Orientation Example
example.compat.menuBar.orientation.description = <p>View the different orientations available with the menu bar component.</p>
# Display on Click
example.compat.menuBar.click.title = Menu Bar Display on Click Example
example.compat.menuBar.click.description = <p>Determine whether hovering will open the menu or if clicking is necessary.</p>
# Keyboard Navigation
example.compat.menuBar.keyboard.title = Menu Bar Keyboard Navigation Example
example.compat.menuBar.keyboard.description = <p>Enable or disable keyboard navigation for the menu bar.</p>
# Icons
example.compat.menuBar.icons.title = Menu Bar Icons Example
example.compat.menuBar.icons.description = <p>Display or hide the image icons associated with some menu items.</p>
# Separator
example.compat.menuBar.separator.title = Menu Bar Separator Example
example.compat.menuBar.separator.description = <p>View the menu item separator component in the context of a menu bar.</p>
# Dynamic
example.compat.menuBar.dynamic.title = Menu Bar Dynamic Example
example.compat.menuBar.dynamic.description = <p>Dynamically generate a list of menu items.</p>

### ICE - Menu Popup
menu.compat.menuPopup.title = ice:menuPopup
menu.compat.menuPopup.subMenu.title = Examples
menu.compat.menuPopup.subMenu.main = Overview
menu.compat.menuPopup.subMenu.events = Events
menu.compat.menuPopup.subMenu.orientation = Orientation
menu.compat.menuPopup.subMenu.hide = Hide On
menu.compat.menuPopup.subMenu.keyboard = Keyboard Navigation
menu.compat.menuPopup.subMenu.icons = Icons
menu.compat.menuPopup.subMenu.separator = Separator
menu.compat.menuPopup.subMenu.dynamic = Dynamic
# Overview
example.compat.menuPopup.title = Overview
example.compat.menuPopup.description = <p>The menu popup is useful for creating a right-click menu in the style of a traditional desktop application. The layout and ordering of the menu is created using a hierarchical series of parent-child menu components. Each component can be customized with text, icons, and style. The items can either link to a page or perform an action on the server.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Right-click on any of the words in the sentence below.</li><li><b>&raquo;</b> A menu popup will be displayed that allows you to choose a style or color for each word.</li></ul>
# Events
example.compat.menuPopup.events.title = Menu Popup Events Example
example.compat.menuPopup.events.description = <p>Right-click on the image below to display a menu popup that can be used to fire events.</p>
# Hide On
example.compat.menuPopup.hide.title = Menu Popup Hide On Example
example.compat.menuPopup.hide.description = <p>Determine how to close the menu popup.</p>
# Keyboard Navigation
example.compat.menuPopup.keyboard.title = Menu Popup Keyboard Navigation Example
example.compat.menuPopup.keyboard.description = <p>Enable or disable keyboard navigation for the menu popup.</p>
# Icons
example.compat.menuPopup.icons.title = Menu Popup Icons Example
example.compat.menuPopup.icons.description = <p>Display or hide the image icons associated with some menu items.</p>
# Separator
example.compat.menuPopup.separator.title = Menu Popup Separator Example
example.compat.menuPopup.separator.description = <p>View the menu item separator component in the context of a menu popup.</p>
# Dynamic
example.compat.menuPopup.dynamic.title = Menu Popup Dynamic Example
example.compat.menuPopup.dynamic.description = <p>Dynamically generate a list of menu items.</p>

### ICE - Chart
menu.compat.chart.title = ice:outputChart
menu.compat.chart.subMenu.title = Examples
menu.compat.chart.subMenu.main = Overview
menu.compat.chart.subMenu.area = Area
menu.compat.chart.subMenu.bar = Bar
menu.compat.chart.subMenu.areaStacked = Area Stacked
menu.compat.chart.subMenu.barStacked = Bar Stacked
menu.compat.chart.subMenu.barClustered = Bar Clustered
menu.compat.chart.subMenu.line = Line
menu.compat.chart.subMenu.point = Point
menu.compat.chart.subMenu.pie2d = Pie 2D
menu.compat.chart.subMenu.pie3d = Pie 3D
menu.compat.chart.subMenu.custom = Custom
menu.compat.chart.subMenu.options = Basic Options
menu.compat.chart.subMenu.dynamic = Dynamic
# Chart
example.compat.chart.title = Overview
example.compat.chart.description = <p>The chart component (built on top of JCharts) is a versatile and powerful way to render chart data in a variety of formats. Colors, labels and legends, point style, etc. can all be customized which allows a developer to display information in the exact way they want.</p>
# Area Chart
example.compat.chart.area.title = Area Chart Example
example.compat.chart.area.description = <p>Area chart</p>
# Area Stacked
example.compat.chart.areaStacked.title = Area Stacked Chart Example
example.compat.chart.areaStacked.description = <p>Chars come in various forms.</p>
# Bar Chart
example.compat.chart.bar.title = Bar Chart Example
example.compat.chart.bar.description = <p>Bar chart.</p>
# Bar Stacked
example.compat.chart.barStacked.title = Bar Stacked Chart Example
example.compat.chart.barStacked.description = <p>Stacked bars chart.</p>
# Bar Clustered
example.compat.chart.barClustered.title = Bar Clustered Chart Example
example.compat.chart.barClustered.description = <p>Stacked bars chart.</p>
# Line
example.compat.chart.line.title = Line Chart Example
example.compat.chart.line.description =<p>Line chart</p>
# Point
example.compat.chart.point.title = Point Chart Example
example.compat.chart.point.description = <p>Point chart</p>
# Pie2d
example.compat.chart.pie2d.title = Pie2d Chart Example
example.compat.chart.pie2d.description = <p>Pie2d chart</p>
# Pie3D
example.compat.chart.pie3d.title = Pie3D Chart Example
example.compat.chart.pie3d.description = <p>Pie3d chart</p>
# Custom
example.compat.chart.custom.title = Custom Chart Example
example.compat.chart.custom.description = <p>Custom chart</p>
# Options
example.compat.chart.options.title = Basic Options
example.compat.chart.options.description = <p>Generic options to customize the chart. Title, height and width, legend placement.</p>
# Dynamic
example.compat.chart.dynamic.title = Dynamic Chart
example.compat.chart.dynamic.description = <p>Dynamically add or remove data from a chart.</p>

### ICE - Connection Status
menu.compat.connectionStatus.title = ice:outputConnectionStatus
menu.compat.connectionStatus.subMenu.title = Examples
menu.compat.connectionStatus.subMenu.main = Overview
menu.compat.connectionStatus.subMenu.labels = Labels
menu.compat.connectionStatus.subMenu.style = Style
# Overview
example.compat.connectionStatus.title = Overview
example.compat.connectionStatus.description = <p>The connection status component is used to display information about the health of a user's session with the web application. This can be useful if you have long running tasks and want to show the user that the server is still working. Also warning of poor connectivity or a lost connection can help if the server crashes or the user's browser loses their internet connection.</p><p>In the example below:</p><ul><li><b>&raquo;</b>  Click "Long Event" to simulate a long running task on the server. Notice how the connection status component displays the active (or "working") status until the task is complete.</li><li><b>&raquo;</b> Click "Disconnect Event" to clear the current session, which will put the connection status component into the disconnected status. After clicking this you will need to refresh your browser.</li></ul>
# Labels
example.compat.connectionStatus.labels.title = Connection Status Label Example
example.compat.connectionStatus.labels.description = <p>Customize the different labels of the connection status component.</p>
# Style
example.compat.connectionStatus.style.title = Connection Status Style Example
example.compat.connectionStatus.style.description = <p>View the different styles of the connection status component.</p>

### ICE - Media
menu.compat.media.title = ice:outputMedia
menu.compat.media.subMenu.title = Examples
menu.compat.media.subMenu.main = Overview
menu.compat.media.subMenu.flash = Flash
menu.compat.media.subMenu.quicktime = Quicktime
menu.compat.media.subMenu.windows = Windows WMV
menu.compat.media.subMenu.real = Real Player
# Overview
example.compat.media.title = Overview
example.compat.media.description = <p>The media component allows rich Flash, Quicktime, WMV, and Real Player files to be easily displayed in the browser. This is a handy and easy to use alternative to manually crafting the HTML required to display these elements. The various controls of the player, as well as size and style can be customized.</p>
# Flash
example.compat.media.flash.title = Media Flash Example
example.compat.media.flash.description = <p>Render media in the Flash format.</p>
# Quicktime
example.compat.media.quicktime.title = Media Quicktime Example
example.compat.media.quicktime.description = <p>Render media in the Quicktime format.</p>
# Windows WMV
example.compat.media.windows.title = Media Windows WMV Example
example.compat.media.windows.description = <p>Render media in the Windows WMV format.</p>
# Real Player
example.compat.media.real.title = Media Real Player Example
example.compat.media.real.description = <p>Render media in the Real Player format.</p>

### ICE - Progress Bar
menu.compat.progress.title = ice:outputProgress
menu.compat.progress.subMenu.title = Examples
menu.compat.progress.subMenu.main = Overview
menu.compat.progress.subMenu.indeterminate = Indeterminate
menu.compat.progress.subMenu.label = Custom Label
menu.compat.progress.subMenu.multiple = Multiple Instances
menu.compat.progress.subMenu.style = Style
# Overview
example.compat.progress.title = Overview
example.compat.progress.description = <p>The progress bar component is very useful for notifying users of the status of long running tasks on the server. For example filtering search results, saving or uploading a large file, processing a complex algorithm, etc. can all be displayed with the progress bar.</p><p>From a developer perspective they can update the progress bar percentage at any point during their long running task, and use Ajax Push to display the update to the user's browser.</p><p>The size, labels, coloring, etc. of the progress bar can be customized.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Click the "Start" button to simulate a long running task on the server that updates the completed status on the page.</li><li><b>&raquo;</b> At any point click the "Stop" button to stop the long running task.</li> <li><b>&raquo;</b> Click "Reset" to put the progress back to 0%.</li></ul>
# Indeterminate
example.compat.progress.indeterminate.title = Indeterminate Progress Bar Example
example.compat.progress.indeterminate.description = <p>Display a progress bar without a specified percent, which is ideal for an unknown long runnning task.</p>
# Custom Label
example.compat.progress.label.title = Custom Progress Bar Label Example
example.compat.progress.label.description = <p>Customize the position and text of the progress bar label.</p>
# Multiple Instances
example.compat.progress.multiple.title = Multiple Progress Bar Instances Example
example.compat.progress.multiple.description = <p>Multiple progress bars all running at once.</p>
# Style
example.compat.progress.style.title = Progress Bar Style Example
example.compat.progress.style.description = <p>Customize the progress bar style.</p>

### ICE - Output Resource
menu.compat.outputResource.title = ice:outputResource
menu.compat.outputResource.subMenu.title = Examples
menu.compat.outputResource.subMenu.main = Overview
menu.compat.outputResource.subMenu.type = Type
menu.compat.outputResource.subMenu.attachment = Attachment
menu.compat.outputResource.subMenu.filename = Filename
menu.compat.outputResource.subMenu.label = Label
# Overview
example.compat.outputResource.title = Overview
example.compat.outputResource.description = <p>Traditionally allowing users access to file resources on the server has sometimes been a challenge. With the output resource component a developer can simply specify a path and the streaming of the resource to the user's browser will be handled automatically.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Click the "Download PDF" link to save a PDF file located on the server.</li></ul>
# Type
example.compat.outputResource.type.title = Type Example
example.compat.outputResource.type.description = <p>View the different types of rendering available with the output resource component.</p>
# Attachment
example.compat.outputResource.attachment.title = Attachment Example
example.compat.outputResource.attachment.description = <p>Choose whether the resource should download as an attachment or attempt to display in the browser.</p>
# Filename
example.compat.outputResource.filename.title = Filename Example
example.compat.outputResource.filename.description = <p>Customize the filename of the resource that is to be downloaded.</p>
# Label
example.compat.outputResource.label.title = Label Example
example.compat.outputResource.label.description = <p>Modify the labels of the button or link that allows the resource to be downloaded.</p>

### ICE - Border Panel
menu.compat.border.title = ice:panelBorder
menu.compat.border.subMenu.title = Examples
menu.compat.border.subMenu.main = Overview
menu.compat.border.subMenu.layout = Layout
menu.compat.border.subMenu.render = Render
menu.compat.border.subMenu.style = Style
# Overview
example.compat.border.title = Border Layout Example
example.compat.border.description = <p>Observe the organization and structure of the page created with the border layout component. The border layout component allows a developer to easily format a page without existing CSS or table knowledge. Simply define content for the different facets on the page and the border layout will create a common looking page. Each facet can be customized or hidden as needed.</p>
# Layout
example.compat.border.layout.title = Border Layout Options
example.compat.border.layout.description = <p>Customize the layout directly via the "layout" attribute.</p>
# Render
example.compat.border.render.title = Border Layout Render
example.compat.border.render.description = <p>Display or hide individual facets of the layout.</p>
# Style
example.compat.border.style.title = Border Layout Style
example.compat.border.style.description = <p>Customize the style of the border facets.</p>

### ICE - Collapsible
menu.compat.collapsible.title = ice:panelCollapsible
menu.compat.collapsible.subMenu.title = Examples
menu.compat.collapsible.subMenu.main = Overview
menu.compat.collapsible.subMenu.toggle = Toggle on Click
menu.compat.collapsible.subMenu.expanded = Expanded
menu.compat.collapsible.subMenu.event = Event
menu.compat.collapsible.subMenu.immediate = Immediate
menu.compat.collapsible.subMenu.multiple = Multiple
# Overview
example.compat.collapsible.title = Overview
example.compat.collapsible.description = <p>The collapsible component provides a simple way to implement the common use case of a rendered/unrendered area on the page. Styling of the header can be customized, as can the label and images used.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Click to expand/contract the "ICEfaces Ajax Push" collapsible header.</li></ul>
# Toggle on Click
example.compat.collapsible.toggle.title = Toggle on Click Example
example.compat.collapsible.toggle.description = <p>View the effect of the toggleOnClick attribute which will allow the entire header to be clicked or not. </p>
# Expanded
example.compat.collapsible.expanded.title = Expanded Example
example.compat.collapsible.expanded.description = <p>Control the expanded state from the bean.</p>
# Event
example.compat.collapsible.event.title = Event Example
example.compat.collapsible.event.description = <p>Acting on the event fired when the collapsible component is used.</p>
# Multiple
example.compat.collapsible.multiple.title = Multiple Example
example.compat.collapsible.multiple.description = <p>Demonstration of having multiple collapsible components (with different content) on the same page.</p>

### ICE - Confirmation Panel
menu.compat.confirmation.title = ice:panelConfirmation
menu.compat.confirmation.subMenu.title = Examples
menu.compat.confirmation.subMenu.main = Overview
menu.compat.confirmation.subMenu.label = Labels
menu.compat.confirmation.subMenu.button = Button Type
menu.compat.confirmation.subMenu.display = Display Options
menu.compat.confirmation.subMenu.mouse = Display at Mouse
# Overview
example.compat.confirmation.title = Overview
example.compat.confirmation.description = <p>The confirmation component is useful for prompting a user before completing an action, which is similar to the functionality of an offline desktop application. For example a confirmation component could block a deletion until the user confirms their choice. Implementing the component is simple and done through customized attributes on the tag, so developers don't have to worry about layout or styling.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Click "Generate a Random Number", which will display a confirmation component.</li><li><b>&raquo;</b> Click "New Number!" at the resulting prompt to generate a new random number.</li></ul>
# Labels
example.compat.confirmation.label.title = Labels Example
example.compat.confirmation.label.description = <p>Customize the button labels and popup text. </p>
# Button Type
example.compat.confirmation.button.title = Button Type Example
example.compat.confirmation.button.description =<p>Choose the different types of buttons to show on the dialog.</p>
# Display Options
example.compat.confirmation.display.title = Display Options Example
example.compat.confirmation.display.description = <p>Customize how the dialog will be displayed.</p>
# Display at Mouse
example.compat.confirmation.mouse.title = Display at Mouse Example
example.compat.confirmation.mouse.description =<p>Demonstrate the ability to display the dialog right by the mouse pointer.</p>

### ICE - Divider
menu.compat.divider.title = ice:panelDivider
menu.compat.divider.subMenu.title = Examples
menu.compat.divider.subMenu.main = Overview
menu.compat.divider.subMenu.orientation = Orientation
menu.compat.divider.subMenu.position = Position
menu.compat.divider.subMenu.content = Dynamic Content
menu.compat.divider.subMenu.embedded = Embedded
# Overview
example.compat.divider.title = Overview
example.compat.divider.description = <p>The panel divider component is useful for allowing a user to customize how they want to view a chunk of content. This component is very rich and helps a web application feel more like a traditional desktop application. The divider orientation can be customized, and the split percentage can be controlled from the server if needed. The content of each area is populated by filling two facets with the desired components. Note that the divider component can be embedded within itself, so multiple layered dividers are possible.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Click and drag the divider bar between the two areas of content to resize the space they use.</li></ul>
# Orientation
example.compat.divider.orientation.title = Panel Divider Orientation Example
example.compat.divider.orientation.description = View the horizontal or vertical orientation the divider supports.
# Position
example.compat.divider.position.title = Panel Divider Position Example
example.compat.divider.position.description = Customize the position of the divider bar from the bean.
# Content
example.compat.divider.content.title = Panel Divider Dynamic Content Example
example.compat.divider.content.description = Dynamically set the content of each pane in the divider component.
# Embedded
example.compat.divider.embedded.title =  Embedded Panel Divider Example
example.compat.divider.embedded.description = Embed one divider component in the pane of another.

### ICE - Drag and Drop
menu.compat.dragdrop.title = ice:panelGroup (drag&drop)
menu.compat.dragdrop.subMenu.title = Examples
menu.compat.dragdrop.subMenu.main = Overview
menu.compat.dragdrop.subMenu.events = Events
menu.compat.dragdrop.subMenu.effect = Effect
# Overview
example.compat.dragdrop.title = Overview
example.compat.dragdrop.description = <p>Drag and drop functionality is very useful for unique use cases in rich web applications. Instead of traditional web methods of add/remove buttons, drag and drop can be used instead. Implementing drag and drop is simple for a developers as they can customize what happens during the drag and drop by using provided listeners. Coupling drag and drop with the effect component is an elegant way to help users understand what is going on, as shown here with the orange highlight when an item is hovered over the cart.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Click and drag an item from the top list into the white shopping cart area below. This will populate the data table of current items, which simulates a user purchasing something from an online store.</li><li><b>&raquo;</b> Click the "Return" button on an item to move it back into the "store" stock.</li></ul>
# Events
example.compat.dragdrop.events.title = Drag & Drop Events Example
example.compat.dragdrop.events.description = <p>View and mask events that drag and drop fires.</p>
# Effect
example.compat.dragdrop.effect.title = Drag & Drop Effect Example
example.compat.dragdrop.effect.description = <p>Optional effect when the drag and drop is complete.</p>

### ICE - Effect
menu.compat.effect.title = ice:panelGroup (Effects)
menu.compat.effect.subMenu.title = Examples
menu.compat.effect.subMenu.main = Overview
# Overview
example.compat.effect.title = Overview
example.compat.effect.description = <p>Effects are useful for easily leveraging Javascript without having to worry about the underlying code. Developers can simply add an effect attribute to a panel group and set when to fire the effect.Duration of the effect animation, customization of the colors, location, size, etc. of the effect are also possible. Multiple effects can be chained together to meet any developer needs.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Choose an effect from the dropdown, which has all available effects provided by this component.</li><li><b>&raquo;</b> Click "Fire Effect" to display the effect on the text in the box below.</li></ul>

### ICE - Popup
menu.compat.popup.title = ice:panelPopup
menu.compat.popup.subMenu.title = Examples
menu.compat.popup.subMenu.main = Overview
menu.compat.popup.subMenu.modal = Modal
menu.compat.popup.subMenu.draggable = Draggable
menu.compat.popup.subMenu.center = Auto Center
menu.compat.popup.subMenu.position = Auto Position
menu.compat.popup.subMenu.client = Client Only
# Overview
example.compat.popup.title = Overview
example.compat.popup.description = <p>The popup component allows a developer to display a modal or non-modal popup that can be dragged, automatically centered, etc.</p><p>This is useful for creating a web application that feels like a traditional desktop application. Critical information or error messages could be displayed in a modal popup, or inline editing could be allowed in a draggable popup that appears over a data table.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Click "Toggle Popup" to display a modal popup component with some basic information on it.</li><li><b>&raquo;</b> Click the "X" button in the header of the displayed popup to close it.</li></ul>
# Modal
example.compat.popup.modal.title = Modal Popup Example
example.compat.popup.modal.description = <p>Display a modal popup which prevents interacting with the page until the popup is dismissed.</p>
# Draggable
example.compat.popup.draggable.title = Draggable Popup Example
example.compat.popup.draggable.description = <p>Display a draggable popup that can be moved around the page.</p>
# Auto Center
example.compat.popup.center.title = Popup Auto Center Example
example.compat.popup.center.description = <p>Automatically center the popup when it is displayed and also when the browser is scrolled.</p>
# Auto Position
example.compat.popup.position.title = Popup Auto Position Example
example.compat.popup.position.description = <p>Automatically position the popup at a set X,Y coordinate and maintain that position through browser scrolling.</p>
# Client Only
example.compat.popup.client.title = Client Only Popup Example
example.compat.popup.client.description = <p>Prevent the draggable popup from sending an event to the server when it is dropped.</p>

### ICE - Positioned Panel
menu.compat.positioned.title = ice:panelPositioned
menu.compat.positioned.subMenu.title = Examples
menu.compat.positioned.subMenu.main = Overview
menu.compat.positioned.subMenu.constraint = Constraint
menu.compat.positioned.subMenu.listener = Listener
menu.compat.positioned.subMenu.dynamic = Dynamic
menu.compat.positioned.subMenu.sort = Sorting
menu.compat.positioned.subMenu.style = Style
# Overview
example.compat.positioned.title = Overview
example.compat.positioned.description = <p>The panel positioned component allows a list to be displayed and re-ordered on the page. The orientation and constraint of the re-ordering can be customized by the developer. If needed listeners can be used to determine when an item is re-ordered.</p><p>In the example below:</p><ul><li><b>&raquo;</b>Click and drag one of the food items below to re-order the item in the panel positioned component. </li></ul>
# Constraint
example.compat.positioned.constraint.title = Positioned Panel Constraint Example
example.compat.positioned.constraint.description = <p>Constrain how the re-ordering is displayed and handled.</p>
# Listener
example.compat.positioned.listener.title = Positioned Panel Listener Example
example.compat.positioned.listener.description = <p>Listen to an event that fires when an item is re-ordered.</p>
# Dynamic
example.compat.positioned.dynamic.title = Positioned Panel Dynamic Example
example.compat.positioned.dynamic.description = <p>Dynamically add or remove items from the positioned list.</p>
# Sort
example.compat.positioned.sort.title = Positioned Panel Sorting Example
example.compat.positioned.sort.description = <p>Automatically sort the positioned list items.</p>
# Style
example.compat.positioned.style.title = Positioned Panel Style Example
example.compat.positioned.style.description = <p>Customize the style of each panel element using varStatus.</p>

### ICE - Series Panel
menu.compat.series.title = ice:panelSeries
menu.compat.series.subMenu.title = Examples
menu.compat.series.subMenu.main = Overview
menu.compat.series.subMenu.dynamic = Dynamic
menu.compat.series.subMenu.rows = Rows
menu.compat.series.subMenu.first = Start From
menu.compat.series.subMenu.content = Custom Content
menu.compat.series.subMenu.style = Style
# Overview
example.compat.series.title = Overview
example.compat.series.description = <p>The panel series component is an iterator that allows a developer to display an arbitrary list of data, similar to a data table (but without requiring an underlying HTML table).</p><p>Data can dynamically be added or removed to the list on the server and the changes will be reflected in the panel series. Also the style, displayed rows, etc. can be customized for the component.</p>
# Dynamic
example.compat.series.dynamic.title = Dynamic Series Panel Example
example.compat.series.dynamic.description = <p>Add or remove items from the panel series component.</p>
# Rows
example.compat.series.rows.title = Series Panel Rows Example
example.compat.series.rows.description = <p>Set the number of rows to display at once with the panel series component.</p>
# Start From
example.compat.series.first.title = Series Panel Start From Example
example.compat.series.first.description = Set what index to start the panel series rendering from with the first attribute.</p>
# Custom Content
example.compat.series.content.title = Series Panel Custom Content Example
example.compat.series.content.description = <p>Customize the content to be used in the panel series component.</p>
# Style
example.compat.series.style.title = Series Panel Style Example
example.compat.series.style.description = <p>Style the panel series children via the varStatus attribute.</p><p>In the example below every second Employee will have a red header using inline styling and EL on the varStatus attribute.</p>


### ICE - Stacking Panel
menu.compat.stacking.title = ice:panelStack
menu.compat.stacking.subMenu.title = Examples
menu.compat.stacking.subMenu.main = Overview
# Overview
example.compat.stacking.title = Overview
example.compat.stacking.description = <p>The stacking panel component is used to display a single item from a "stack" of available pieces of content. This is similar to tabs, where only a single piece of content is displayed at once.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Choose a selected panel from the radio buttons below, and observe the changed image and text description</li></ul>

### ICE - Tab Pane
menu.compat.tab.title = ice:panelTabSet
menu.compat.tab.subMenu.title = Examples
menu.compat.tab.subMenu.main = Overview
menu.compat.tab.subMenu.placement = Placement
menu.compat.tab.subMenu.icon = Icons
menu.compat.tab.subMenu.label = Labels
menu.compat.tab.subMenu.wrapping = Text Wrapping
menu.compat.tab.subMenu.visibility = Visibility
menu.compat.tab.subMenu.control = Backend Control
menu.compat.tab.subMenu.events = Events
menu.compat.tab.subMenu.dynamic = Dynamic
# Overview
example.compat.tab.title = Overview
example.compat.tab.description = <p>The tab component is commonly used for separating and laying out data. Each tab can have arbitrary content defined by the developer.The label, icon, style, layout, etc. of the tabs can be customized.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Click the different tabs (Account, Support, Forum) below to display their associated content.</li></ul>
# Position
example.compat.tab.placement.title = Tab Placement Example
example.compat.tab.placement.description =<p>Customize where the tabs will display on the container.</p>
# Icons
example.compat.tab.icon.title = Tab Icons Example
example.compat.tab.icon.description = <p>Add icons to the tab component.</p>
# Labels
example.compat.tab.label.title = Tab Labels Example
example.compat.tab.label.description = <p>Customize the tab labels and method of rendering.</p>
# Text Wrapping
example.compat.tab.wrapping.title = Tab Text Wrapping Example
example.compat.tab.wrapping.description = <p>View the effect of label text wrapping.</p>
# Visibility
example.compat.tab.visibility.title = Tab Visibility Example
example.compat.tab.visibility.description = <p>Hide or display each individual tab.</p>
# Backend Control
example.compat.tab.control.title = Tab Backend Control Example
example.compat.tab.control.description = <p>Control the selected tab from the backing bean.</p>
# Events
example.compat.tab.events.title = Tab Events Example
example.compat.tab.events.description = <p>Listener that fires when the tab is changed.</p>
# Dynamic
example.compat.tab.dynamic.title = Dynamic Tabs Example
example.compat.tab.dynamic.description = <p>Dynamically add and remove tabs.</p>

### ICE - Tooltip
menu.compat.tooltip.title = ice:panelTooltip
menu.compat.tooltip.subMenu.title = Examples
menu.compat.tooltip.subMenu.main = Overview
menu.compat.tooltip.subMenu.display = Display Type
menu.compat.tooltip.subMenu.hide = Hide Type
menu.compat.tooltip.subMenu.draggable = Draggable
menu.compat.tooltip.subMenu.delay = Hover Delay
menu.compat.tooltip.subMenu.move = Move with Mouse
menu.compat.tooltip.subMenu.preview = Website Previews
# Overview
example.compat.tooltip.title = Overview
example.compat.tooltip.description = <p>The panel tooltip component is useful for displaying rich tooltips that can contain any other component, such as plain text, images, even calendars or data tables. Customizing how the tooltip is displayed (hover, click, etc.) can be done by the developer. A common usage would be website previews when a link is hovered over, or definitions of words in a scientific paper.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Mouse over each highlighted word below to see additional information on the topic displayed using a panel tooltip component.</li></ul>
# Display On
example.compat.tooltip.display.title = Tooltip Display On Example
example.compat.tooltip.display.description = <p>Simple example demonstrating the different ways the tooltip can be displayed.<p>
# Hide On
example.compat.tooltip.hide.title = Tooltip Hide On Example
example.compat.tooltip.hide.description = <p>Simple example demonstrating the different ways the tooltip can be hidden.<p>
# Draggable
example.compat.tooltip.draggable.title = Tooltip Draggable Example
example.compat.tooltip.draggable.description = <p>Allow the tooltip to be dragged or not.<p>
# Hover Delay
example.compat.tooltip.delay.title = Tooltip Hover Delay Example
example.compat.tooltip.delay.description = <p>Customize the delay before displaying the tooltip on hover.<p>
# Move with Mouse
example.compat.tooltip.move.title = Tooltip Move with Mouse Example
example.compat.tooltip.move.description = <p>Toggle the tooltip moving with the mouse or not.<p>
# Website Previews
example.compat.tooltip.preview.title = Tooltip Website Previews Example
example.compat.tooltip.preview.description = <p>Example of hover previews on links.<p>

### ICE - Data Table (Row Selector)
menu.compat.selector.title = ice:rowSelector
menu.compat.selector.subMenu.title = Examples
menu.compat.selector.subMenu.main = Overview
menu.compat.selector.subMenu.type = Type
menu.compat.selector.subMenu.events = Events
menu.compat.selector.subMenu.toggle = Toggle on Input
menu.compat.selector.subMenu.pre = Pre-Style
# Overview
example.compat.selector.title = Overview
example.compat.selector.description = <p>The data table row selector is used to select individual or multiple rows in a data table. A developer can manage what rows have been selected and act upon them, such as deleting all selected rows, editing an individual row, etc. The color styling can be customized so that mousing over selected or deselected rows will display to the user and clicked rows are easy to see.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Click a row in the data table to select it.</li><li><b>&raquo;</b> Hold the Shift key and click multiple rows to select more than one row.</li></ul>
# Type
example.compat.selector.type.title = Row Selector Type Example
example.compat.selector.type.description = <p>Customize the type of row selector.<p>
# Events
example.compat.selector.events.title = Row Selector Events Example
example.compat.selector.events.description = <p>View the row selector events that can be fired and listened to.<p>
# Toggle on Input
example.compat.selector.toggle.title = Row Selector Toggle on Input Example
example.compat.selector.toggle.description = <p>Choose whether the selection should toggle when a button or input field in the row is interacted with.<p>
# Pre-Style on Selection
example.compat.selector.pre.title = Row Selector Pre-Style Example
example.compat.selector.pre.description = <p>Pre-style the CSS for the row selection immediately on the client instead of waiting for the server.<p>

### ICE - Calendar
menu.compat.calendar.title = ice:selectInputDate
menu.compat.calendar.subMenu.title = Examples
menu.compat.calendar.subMenu.main = Overview
menu.compat.calendar.subMenu.popup = Popup
menu.compat.calendar.subMenu.pattern = Converter Pattern
menu.compat.calendar.subMenu.timezone = Timezones
menu.compat.calendar.subMenu.highlight = Date Highlighting
# Overview
example.compat.calendar.title = Overview
example.compat.calendar.description = <p>The calendar component allows users to easily visualize and select a date, without having to worry about formatting. The display can either be inline or visible only when a button is explicitly clicked. How the month and year are displayed can also be customized. The component supports highlighting individual days or weeks can be useful to display relevant information for those dates.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Select a date by clicking on a number in the calendar.</li></ul>
# Popup
example.compat.calendar.popup.title = Calendar Popup Example
example.compat.calendar.popup.description = <p>Configure the calendar popup appearance.</p>
# Pattern
example.compat.calendar.pattern.title = Calendar Converter Pattern Example
example.compat.calendar.pattern.description = <p>Demonstration of custom date patterns and how they apply to the calendar.</p>
# Timezone
example.compat.calendar.timezone.title = Calendar Timezones Example
example.compat.calendar.timezone.description = <p>Choose a different timezone to see how it applies to the calendar.</p>
# Highlight
example.compat.calendar.highlight.title = Calendar Date Highlighting Example
example.compat.calendar.highlight.description = <p>Highlight specific days or weeks with the calendar.</p>

### ICE - Auto Complete
menu.compat.autocomplete.title =  ice:selectInputText
menu.compat.autocomplete.subMenu.title = Examples
menu.compat.autocomplete.subMenu.main = Overview
menu.compat.autocomplete.subMenu.simple = Simple
menu.compat.autocomplete.subMenu.complex = Complex
menu.compat.autocomplete.subMenu.rows = Rows
# Overview
example.compat.autocomplete.title = Overview
example.compat.autocomplete.description = <p>Start typing a City into the provided input field. As you type a list of available city options will be filtered and displayed. Navigation of this menu can be done using the keyboard arrows or the mouse. Selecting a city will automatically submit it to the server, or further typing can be done to reduce the filtered results further.The "Current Results" field displays how many cities match the currently typed text, and will narrow accordingly. If no matches are found the filter will reset to check the first letter only.From a developer perspective the filtering of autocomplete results is done in the backend, which allows greater customization of how to match. The displayed options can be customized to use a richer appearance of any complex components, instead of just plain text.</p>
# Simple
example.compat.autocomplete.simple.title = Auto Complete Simple
example.compat.autocomplete.simple.description = <p>Simple example of the Auto Complete component.</p>
# Complex
example.compat.autocomplete.complex.title = Auto Complete Complex
example.compat.autocomplete.complex.description = <p>Complex example showing advanced formatting of the selectable items.</p>
# Rows
example.compat.autocomplete.rows.title = Auto Complete Rows
example.compat.autocomplete.rows.description = <p>Customize the appearance of the Auto Complete component by modifying the number of displayed rows.</p>

### ICE - Set Event Phase
menu.compat.eventphase.title = ice:setEventPhase
menu.compat.eventphase.subMenu.title = Examples
menu.compat.eventphase.subMenu.main = Overview
menu.compat.eventphase.subMenu.change = Value Change Event
menu.compat.eventphase.subMenu.action = Action Event
# Overview
example.compat.eventphase.title = Overview
example.compat.eventphase.description = <p>In the example below:</p><ul><li><b>&raquo;</b> Choose a Province and click Submit.</li></ul><p>If setEventPhase is enabled, the capital City of the selected Province will automatically be set through a valueChangeListener that fires later in the JSF lifecycle because of setEventPhase. However if setEventPhase is not enabled, the City will not be updated in the view. This is because the valueChangeListener fires earlier in the JSF lifecycle, and the City it sets is overwritten by the currently selected City on the page. This process will work the same if a City is selected and Submit is clicked, except a matching Province will try to be set.</p>
# Value Change Event
example.compat.eventphase.change.title = Value Change Event Phase Example
example.compat.eventphase.change.description = <p>This example demonstrates firing a valueChangeListener in a later phase through the setEventPhase. This allows us to modify a bean value without the value being overwritten in a later phase, as normally happens in the early firing of valueChangeListeners.</p> <p>In the example below:</p><ul><li><b>&raquo;</b> Check "Choose Random Number" to true. Then press "Submit".</li><li>In the Event Log you can see a number was generated and set through a valueChangeListener. However the number was then overwritten by the rest of the lifecycle where the value in the inputText field was set into the bean.</li><li><b>&raquo;</b> Check "Enable Set Event Phase" to true and press "Apply". Uncheck "Choose Random Number" and press "Submit".</li><li>Since setEventPhase has been enabled, we can try the use case again and see the difference.</li><li><b>&raquo;</b> Check "Choose Random Number" to true. Then press "Submit".</li><li>In the Event Log you will now see that the normal lifecycle set applying the value in the inputText field to the bean. And then the valueChangeListener fires, since it was moved to a later lifecycle phase thanks to setEventPhase. Now when the new random number is generated and set it isn't overwritten, and appears on the page as expected.</li></ul>
# Action Event
example.compat.eventphase.action.title = Action Event Phase Example
example.compat.eventphase.action.description = <p>This example demonstrates using setEventPhase to force an actionListener to fire earlier in the lifecycle, before validation occurs. This creates an effect similar to the immediate="true" attribute.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Leave the inputText field blank and press the "Normal Action" button.</li><li>You will notice the validation fires as the normal JSF lifecycle is being completed.</li><li><b>&raquo;</b> Leave the inputText field blank and press the "Set Event Phase Action" button.</li><li>In the Event Log you will see that the actionListener method was reached in the bean and no validation fired. This is because setEventPhase has moved that actionListener from the end of the lifecycle to the start, before validation fires. It is similar to adding the immediate="true" attribute to a component, but allows greater customization.</li><li><b>&raquo;</b> Uncheck "Enable Set Event Phase" and press "Apply".</li><li><b>&raquo;</b> Leave the inputText field blank and press the "Set Event Phase Action" button.</li><li>You can see that without setEventPhase the button is the same as "Normal Action" and will fire validation which blocks the actionListener from executing.</li></ul>

### ICE - Tree
menu.compat.tree.title = ice:tree
menu.compat.tree.subMenu.title = Examples
menu.compat.tree.subMenu.main = Overview
menu.compat.tree.subMenu.events = Events
menu.compat.tree.subMenu.icons = Custom Icons
menu.compat.tree.subMenu.navigation = Hide Navigation
menu.compat.tree.subMenu.root = Hide Root Node
menu.compat.tree.subMenu.dynamic = Dynamic
# Overview
example.compat.tree.title = Overview
example.compat.tree.description = <p>The tree component is used for displaying parent-child data in a hierarchical fashion. This style of display is common in businesses as a wide variety of data can be managed while users can still easily understand the layout. The text and icon of each node and leaf can be customized as needed, as can many attributes of the tree itself. This component is built on top of the Swing JTree, so developers familiar with that node approach will see similarities in the tree component.</p><p>In the example below:</p><ul><li><b>&raquo;</b> Expand and contract the different nodes in the tree.</li><li><b>&raquo;</b> Click the "Regenerate" button to randomly create a new set of data for the tree.</li></ul>
# Events
example.compat.tree.events.title = Tree Events Example
example.compat.tree.events.description = <p>Demonstration of the different events the tree can fire.</p>
# Custom Icons
example.compat.tree.icons.title = Tree Custom Icons Example
example.compat.tree.icons.description = <p>Custom image icons for the tree nodes and leafs.</p><p>In the example below, custom folder and leaf icons to simulate camera images being organized in a tree. They can also be set inline on the page, or directly in the backing bean.</p>
# Hide Navigation
example.compat.tree.navigation.title = Tree Hide Navigation Example
example.compat.tree.navigation.description = <p>Allow the navigation links to be hidden.</p>
# Hide Root Node
example.compat.tree.root.title = Tree Hide Root Note Example
example.compat.tree.root.description = <p>Toggle the visibility of the root node.</p>
# Dynamic
example.compat.tree.dynamic.title = Dynamic Tree Example
example.compat.tree.dynamic.description = <p>Add and remove nodes from the tree component.</p>


### EE - Filler Properties
### EE - Table
menu.ee.table.title = Table Components
### EE - Layout
menu.ee.layout.title = Layout Components
### EE - Selection
menu.ee.selection.title = Selection Components
### EE - Tree
menu.ee.tree.title = Tree Components
### EE - Process
menu.ee.process.title = Process Components
### EE - Status Bar
menu.ee.statusbar.title = Status Bar
### EE - Slideshow
menu.ee.slideshow.title = Slide Show
### EE - Schedule
menu.ee.schedule.title = Schedule
