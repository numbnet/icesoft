<!--
  ~ Version: MPL 1.1
  ~
  ~ The contents of this file are subject to the Mozilla Public License
  ~ Version 1.1 (the "License"); you may not use this file except in
  ~ compliance with the License. You may obtain a copy of the License at
  ~ http://www.mozilla.org/MPL/
  ~
  ~ Software distributed under the License is distributed on an "AS IS"
  ~ basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  ~ License for the specific language governing rights and limitations under
  ~ the License.
  ~
  ~ The Original Code is ICEfaces 1.5 open source software code, released
  ~ November 5, 2006. The Initial Developer of the Original Code is ICEsoft
  ~ Technologies Canada, Corp. Portions created by ICEsoft are Copyright (C)
  ~ 2004-2011 ICEsoft Technologies Canada, Corp. All Rights Reserved.
  ~
  ~ Contributor(s): _____________________.
  -->

<project name="common"> 

    <!-- This property file is only used for EE builds and overrides various
         property values if it is available. It's possible for it to be in
         different locations (src vs binary build) so we attempt to load it
         from both places. -->
    <property file="../../../../ee-bundle.properties"/>
    <property file="../../../ee-bundle.properties"/>
    <property file="../../../build.properties"/>

    <property name="icefaces.base.dir" location="../.."/>
    <property name="samples.dist.dir" location="${icefaces.base.dir}/samples/dist"/>
    <property name="lib.dir" location="${icefaces.base.dir}/lib"/>
    <property name="mojarra.lib.dir" location="${lib.dir}/mojarra"/>
    <property name="myfaces.lib.dir" location="${lib.dir}/myfaces"/>
    <property name="lib.compat.dir" location="${lib.dir}/compat"/>
    <property name="lib.compat.dir.includes" value=""/>
    <property name="lib.application.dir" location="./lib"/>
    <property name="lib.compile.application.includes" value=""/>
    <property name="lib.distribute.application.includes" value=""/>

    <property name="lib.portlet.dir" location="${lib.dir}/portlets"/>

    <property name="java.dir" location="./src/main/java"/>
    <property name="res.dir" location="./src/main/resources"/>
    <property name="web.dir" location="./src/main/webapp"/>
    
    <property name="build.dir" location="./build"/>
    <property name="classes.dir" location="${build.dir}/classes"/>
    <property name="dist.dir" location="${build.dir}/dist"/>

    <property name="icepush.lib.name" value="icepush" />
    <property name="icefaces.lib.name" value="icefaces" />
    <property name="icefaces-ace.lib.name" value="icefaces-ace" />
    <property name="icefaces-compat.lib.name" value="icefaces-compat" />

    <!-- Check which JSF implementation to use and set the appropriate sub-directory  -->
    <condition property="jsf.lib.dir" value="${myfaces.lib.dir}" else="${mojarra.lib.dir}">
        <isset property="myfaces"/>
    </condition>

    <patternset id="lib.compile">
        <include name="*.jar"/>
    </patternset>

    <patternset id="lib.distribute">
        <patternset id="lib.distribute.ice" includes="${icefaces.lib.name}.jar ${icefaces-ace.lib.name}.jar ${icefaces-compat.lib.name}.jar ${icepush.lib.name}.jar">
            <exclude name="${icefaces.lib.name}.jar"        if="no-icefaces"/>

            <exclude name="${icefaces-ace.lib.name}.jar"    if="no-icefaces"/>
            <exclude name="${icefaces-ace.lib.name}.jar"    unless="ace"/>

            <exclude name="${icefaces-compat.lib.name}.jar" if="no-icefaces"/>
            <exclude name="${icefaces-compat.lib.name}.jar" unless="compat"/>

            <exclude name="${icepush.lib.name}.jar"         if="no-icefaces"/>
            <exclude name="${icepush.lib.name}.jar"         if="no-icepush"/>
        </patternset>
    </patternset>

    <patternset id="lib.distribute.jsf">
        <exclude name="*.jar" unless="jsf"/>
    </patternset>

    <patternset id="lib.compile.compat" includes="commons-logging.jar ${lib.compile.compat.includes}">
        <exclude name="*.jar"                   unless="compat"/>
    </patternset>

    <patternset id="lib.distribute.compat" includes="commons-logging.jar ${lib.distribute.compat.includes}">
        <exclude name="*.jar"                   unless="compat"/>
    </patternset>

    <patternset id="lib.distribute.portlet">
        <include name="portletfaces*.jar"/>
        <include name="icefaces*.jar"/>
        <exclude name="*.jar" unless="portlet"/>
    </patternset>

    <patternset id="lib.compile.application" includes="${lib.compile.application.includes}"/>

    <patternset id="lib.distribute.application" includes="${lib.distribute.application.includes}"/>

    <target name="clean">
        <delete dir="${build.dir}"/>
        <!--<delete file="${samples.dist.dir}/${ant.project.name}.war"/>-->
    </target>

    <target name="pre.compile">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/classes"/>
        <mkdir dir="${build.dir}/dist"/>
    </target>

    <target name="compile" depends="pre.compile">
        <javac srcdir="${java.dir}"
               destdir="${classes.dir}"
               source="1.5"
               target="1.5"
               debug="true"
               includeantruntime="false">

            <classpath>
                <fileset dir="${lib.application.dir}" erroronmissingdir="false">
                    <patternset refid="lib.compile.application"/>
                </fileset>
                <fileset dir="${lib.compat.dir}">
                    <patternset refid="lib.compile.compat"/>
                </fileset>
                <fileset dir="${jsf.lib.dir}">
                    <patternset refid="lib.compile"/>
                </fileset>
                <fileset dir="${lib.dir}" >
                    <patternset refid="lib.compile"/>
                </fileset>
            </classpath>
        </javac>
        
        <copy todir="${classes.dir}">
            <fileset dir="${res.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>
        
        <copy todir="${classes.dir}">
            <fileset dir="${java.dir}">
                <include name="**/*.java" if="includeSrc"/>
            </fileset>
        </copy>
        
    </target>

    <target name="war.basic" depends="compile">
        <war basedir="${web.dir}"
             destfile="${dist.dir}/${ant.project.name}.war" 
             webxml="${web.dir}/WEB-INF/web.xml">
            <lib dir="${lib.dir}">
                <patternset refid="lib.distribute"/>
            </lib>
            <lib dir="${lib.compat.dir}">
                <patternset refid="lib.distribute.compat"/>
            </lib>
            <lib dir="${lib.portlet.dir}">
                <patternset refid="lib.distribute.portlet"/>
            </lib>
            <lib dir="${lib.application.dir}" erroronmissingdir="false">
                <patternset refid="lib.distribute.application"/>
            </lib>
            <lib dir="${jsf.lib.dir}" erroronmissingdir="false">
                <patternset refid="lib.distribute.jsf"/>
            </lib>

            <!-- Add the icefaces-ee-ext.jar only if it exists.  There are
                 two possible locations depending on the EE distribution
                 (src vs bin) so we look in both places.  In the src 
                 distribution, the icefaces-ee project needs to be built first
                 so that the .jar file is available. In non-EE builds we simply
                 ignore the missing dir and do a normal build.
            -->
            <lib dir="../../../lib" erroronmissingdir="false">
                <include name="icefaces-ee-ext.jar"/>
            </lib>
            
            <lib dir="../../../../icefaces-ee/lib" erroronmissingdir="false">
                <include name="icefaces-ee-ext.jar"/>
            </lib>
            
            <classes dir="${classes.dir}"/>
        </war>
        <unzip src="${dist.dir}/${ant.project.name}.war" dest="${dist.dir}/exploded"/>
        <copy file="${dist.dir}/${ant.project.name}.war" todir="${samples.dist.dir}"/>
    </target>

    <target name="servlet-profile"
            description="Generate a .war file according to the servlet-profile which includes the JSF and EL libraries. (Jetty 7, Tomcat 6 and 7)">
        <antcall target="war.basic">
            <param name="jsf"  value="true" />
        </antcall>
    </target>

    <target name="web-profile"
            description="Generate a .war file according to the web-profile which excludes the JSF and EL libraries. (GlassFish v3, JBoss 6)">
        <antcall target="war.basic" />
    </target>

</project>
