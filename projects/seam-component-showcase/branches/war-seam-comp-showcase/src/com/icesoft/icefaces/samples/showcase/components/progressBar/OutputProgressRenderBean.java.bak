/*
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * "The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations under
 * the License.
 *
 * The Original Code is ICEfaces 1.5 open source software code, released
 * November 5, 2006. The Initial Developer of the Original Code is ICEsoft
 * Technologies Canada, Corp. Portions created by ICEsoft are Copyright (C)
 * 2004-2006 ICEsoft Technologies Canada, Corp. All Rights Reserved.
 *
 * Contributor(s): _____________________.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"
 * License), in which case the provisions of the LGPL License are
 * applicable instead of those above. If you wish to allow use of your
 * version of this file only under the terms of the LGPL License and not to
 * allow others to use your version of this file under the MPL, indicate
 * your decision by deleting the provisions above and replace them with
 * the notice and other provisions required by the LGPL License. If you do
 * not delete the provisions above, a recipient may use your version of
 * this file under either the MPL or the LGPL License."
 *
 */

package com.icesoft.icefaces.samples.showcase.components.progressBar;

import javax.ejb.Remove;
import javax.faces.event.ActionEvent;
import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import com.icesoft.faces.async.render.RenderManager;
import com.icesoft.faces.async.render.Renderable;
import com.icesoft.faces.async.render.IntervalRenderer;
import com.icesoft.faces.component.outputprogress.OutputProgress;
import com.icesoft.faces.webapp.xmlhttp.PersistentFacesState;
import com.icesoft.faces.webapp.xmlhttp.RenderingException;
import com.icesoft.icefaces.samples.showcase.components.fileUpload.FileAdminBean;
import com.icesoft.icefaces.samples.showcase.components.progressBar.OutputProgressIndeterminateBean.LongOperationRunner;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jboss.seam.annotations.Begin;
import org.jboss.seam.annotations.Destroy;
import org.jboss.seam.annotations.End;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Out;
import org.jboss.seam.annotations.Scope;
import org.jboss.seam.annotations.intercept.BypassInterceptors;
import org.jboss.seam.core.Manager;
import org.jboss.seam.faces.FacesMessages;
import org.jboss.seam.ScopeType;


import java.io.Serializable;

/**
 * <p>The OutputProgressRenderBean backs the determinate mode of the
 * outputProgress component.</p>
 *
 * @see OutputProgressPropertyBean
 * @since 1.0
 */
@Scope(ScopeType.EVENT)
@Name("progress")
//@BypassInterceptors
public class OutputProgressRenderBean implements Renderable, Serializable {
	   private static Log log =
           LogFactory.getLog(OutputProgressRenderBean.class);	
    /**
     * Renderable Interface
     */
	    private PersistentFacesState state;
	    
	    @In
	    private RenderManager renderManager;

	    /**
	     * Get the PersistentFacesState.
	     *
	     * @return state the PersistantFacesState
	     */
	    public PersistentFacesState getState() {
	        return state;
	    }

	    /**
	     * Handles rendering exceptions for the progress bar.
	     *
	     * @param renderingException the exception that occured
	     */
	    public void renderingException(RenderingException renderingException) {
	        renderingException.printStackTrace();
	    }

	    /**
	     * Sets the Render Manager.
	     *
	     * @param renderManager
	     */
	    public void setRenderManager(RenderManager renderManager) {
	        this.renderManager = renderManager;
	    }

	    /**
	     * Gets RenderManager, just try to satisfy WAS
	     *
	     * @return RenderManager null
	     */
	    public RenderManager getRenderManager() {
	        return renderManager;
	    }

	    // flag to disable start button when progress bar is started
	    private boolean disableStartButton = false;

	    // binding back to jsp page
	    private OutputProgress progressBar;

	    // value bound to component as an indicator of progress
	    private int percent = 0;

	    /**
	     * Default construction for the backing bean.
	     */
	    public OutputProgressRenderBean() {
	        state = PersistentFacesState.getInstance();
	    }

	    /**
	     * Gets the disabled state for the start button.
	     *
	     * @return true if the button should be disabled; false otherwise.
	     */
	    public boolean isDisableStartButton() {
	        return disableStartButton;
	    }
	    public void setDisableStartButton(boolean dsb){
	    	this.disableStartButton = dsb;
	    }

	    /**
	     * Start a new thread to do some work which is monitored for progress.
	     */
	    @Begin
	    public void start(ActionEvent event) {
	    	log.info("starting thread");
	        Thread testThread = new Thread(new LongOperationRunner(this,
                    PersistentFacesState.getInstance()));
	        testThread.start();
	    }

	    /**
	     * Get the current percent value.
	     *
	     * @return percent complete of progress bar
	     */
	    public int getPercent() {
	        return percent;
	    }

	    /**
	     * Sets the current percent value.
	     *
	     * @param percent percent value of progress bar state.
	     */
	    public void setPercent(int percent) {

	        this.percent = percent;
	    	if (percent >=99)doneThis();
	    }
	    @End
	    public void doneThis(){
	    	log.info("done the 100 percent");
	    }
	    /**
	     * Gets the progress bar binding.
	     *
	     * @return bound progress bar.
	     */
	    public OutputProgress getProgressBar() {
	        return progressBar;
	    }

	    /**
	     * Sets the progress bar binding.
	     *
	     * @param progressBar progress bar to bind to this bean.
	     */
	    public void setProgressBar(OutputProgress progressBar) {
	        this.progressBar = progressBar;
	    }

	    /**
	     * Helper class that simulates a long running task.  The progress bar
	     * updates based on this task via requestRender() calls.
	     */
	    protected class LongOperationRunner implements Runnable {

	        PersistentFacesState state = null;
	        OutputProgressRenderBean outputBean;
	        RenderManager rm;

	        public LongOperationRunner(OutputProgressRenderBean outputBean,
	        		PersistentFacesState state) {
	            disableStartButton = true;
//	            percent = 0;
	            this.outputBean = outputBean;
	            this.state = state;
	        }

	        public void run() {
	            try {
	                for (int i = 0; i <= 100; i += 10) {
	                    // pause the thread
	                    Thread.sleep(300);
	                    // update the percent value
	                    outputBean.setPercent(i);
	                    // call a render to update the component state
	                    try {
	                        state.execute();
	                        state.render();
//	        	            if (rm==null)rm = outputBean.getRenderManager();
//	                        rm.requestRender(outputBean);
//	                    } catch (IllegalStateException e) {
//	                        e.printStackTrace();
//	                    }
	                    }catch (RenderingException re) {
	                            log.error("Rendering exception caught: ", re);
	                    }
	                }
	                // now that thread work is complete enable "start" button
	                outputBean.setDisableStartButton(false);
                    try {
                        state.execute();
                        state.render();
                    } 
                    catch (RenderingException re) {
                        log.error("Rendering exception caught: ", re);
                    }
	                // refresh DOM one more time to update "start" button
//    	            if (rm==null){
//    	            	rm = outputBean.getRenderManager();
//    	            	rm.requestRender(outputBean);
//    	            }else log.info("renderManager rm is null");
//	                
 	            }
	            catch (InterruptedException e) {
	                e.printStackTrace();
	            }
	        }
	    }

	    /**
	     * Determine whether the progress bar is active.
	     *
	     * @return the activity status
	     */
	    public boolean isRunningTask() {
	        return disableStartButton;
	    }

	    /**
	     * Set whether the progress bar is active.
	     *
	     * @param runningTask the new activity status
	     */
	    public void setRunningTask(boolean runningTask) {
	        disableStartButton = runningTask;
	    }
		@Destroy @Remove
		public void destroy(){
			System.out.println("OutputProgressRenderBean destroy");
		}
	}