OK....so here's how the project started. 

Date: Jun 5th, 2007

- setup tables in MySQL (just for bidder and auctionitems since the bids would be generated after the application started, so that would be done differently) Also, decided to just use the classes for entities here (using Seam framework) just for looking at things....Since Yip mentioned perhaps not using hibernate, we might want to do things differently....see what they say later.

- ran icefaces-seam-gen to generate seam-auctionMontitor.  Now that we have the configuration files and the entity classes (in the model package) will do some manual changing of things.

-  changed everything over to hypersonice with an import.sql   Only the users and the auctionItems to be read in as the bidAction table will be generated through the application and start empty.

- used RegisterAction Class with register.xhtml but needs to be put in conversational scope

- to use what we have so far, just checkout the project and then build and deploy it.  Look at the AuctionItemsList link on the home page and that will show you a basic search and listing of what is currently in the table.  Will use this as a starting point for the seam-auctionMonitor application.

ToDo (for functional requirements)
- create a bid button in the table (instead of search) that is wired to the "loggedIn" session attribute and fires up the register/login page (need conversation propagation to bring back to current page) and allow edit of a bid column (we have to expand our table, or make some Transient attributes)

- include a confirmation (?) facelet within that conversation that confirms that their bid has been accepted???

Am I missing anything guys?


Date: June 8th, 2007

Committed classes with some skeleton methods in order to implement the rendering api as discussed in our design session.

AuctionHouse - an application scope class that will initialize the application
AuctionitemBean - a combination of AuctionItem and Bid that is used to represent an item in the UI.  The AuctionitemBean will make render calls when necessary.
ViewManager - contains a List of "views"
The only view right now is AuctionItemSearchingAction which is based on the Seam Booking example.  This class implements Renderable and changes the UI by creating a new collection of AuctionItemBeans with each new search.



